{"version":3,"sources":["Square.js","Board.js","logic.js","Game.js","App.js","index.js"],"names":["Square","props","face","detail","special","num","react_default","a","createElement","className","includes","buyPrice","classnames","playerColor","owner","level","provinceColor","rents","multiplier","garrisons","upgradePrice","styleName","id","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playerColors","board","push","corner","renderSquare","row","i","ownerColor","squares","length","src_Square","key","specials","buyPrices","provinces","visitors","createBoard","React","Component","tile","arguments","undefined","player","number","army","money","territory","position","railsOwned","Game","newRound","winner","title","concat","isRoomCreator","gameOver","Swal","fire","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","pieces","1","state","xScore","2","oScore","setState","checkForWinner","newTurn","document","getElementsByClassName","innerHTML","piece","console","log","goButton","querySelector","addEventListener","goListener","disabled","updateBoard","action","newPlayers","newSquares","toastMessages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","toastMessage","ToastsStore","success","err","return","players","pawn","movePawn","checkMonopoly","pos","neighbors","color","splice","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","idx","Math","pow","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","newIdx","newSquare","style","left","leftOffsets","offsetLeft","top","topOffsets","offsetTop","onMove","begin","dice1","parseInt","random","dice2","oldIdx","removeEventListener","dice","alert","streetFight","attackDices","defendDices","attackTotal","defendTotal","tax","endTurnButton","endTurnListener","upgradeButton","upgradeListener","recruitButton","recruitListener","payButton","payListener","assaultButton","assaultListener","purchaseButton","purchaseListener","toasts","error","onPurchase","onPay","payer","collector","onUpgrade","disbled","attacker","siege","casualty","removed","onAssault","join","onRecruit","armyPrice","endTurn","3","6","8","9","11","13","14","16","18","19","21","23","24","26","27","29","31","32","34","37","39","12","28","5","15","25","35","counter","_this2","getMessage","msg","status","onClick","src_Board_0","lib","store","App","onPressCreate","e","roomId","shortid","generate","substring","lobbyChannel","subscribe","channels","withPresence","padding","isDisabled","myTurn","onPressJoin","input","inputPlaceholder","joinRoom","hereNow","response","totalOccupancy","notRoomCreator","catch","isPlaying","unsubscribe","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","close","_this3","src_Game","xUsername","oUsername","ReactDOM","render","src_App","getElementById"],"mappings":"8QA4FeA,SAxFA,SAAAC,GACb,IAAIC,EACAC,EA0EJ,OAzEIF,EAAMG,QAENF,EADe,GAAbD,EAAMI,IAEVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,oBAEQ,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,IAAIE,SAAST,EAAMI,KAE3CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,MAEqB,IAAbR,EAAMI,IAEhBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BAEQ,CAAC,GAAG,IAAIE,SAAST,EAAMI,KAEjCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BAEqB,GAAbP,EAAMI,IAEhBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBAIFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uBAIFN,EACAI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IACIR,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACCP,EAAMU,SAAW,IAAMV,EAAMU,SAAW,KACzCL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAW,QAASX,EAAMY,cAAeZ,EAAMa,MAAQ,UAAYb,EAAMa,MAAQ,MACjGR,EAAAC,EAAAC,cAAA,WACCP,EAAMc,MAAQ,UAAYd,EAAMc,MAAQ,MAG3CZ,EACAG,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAW,SAAUX,EAAMe,gBAA3C,IACIf,EAAMI,IACRC,EAAAC,EAAAC,cAAA,WACCP,EAAMU,SAAW,IAAMV,EAAMU,SAAW,KACzCL,EAAAC,EAAAC,cAAA,WACCP,EAAMa,MAAQ,UAAYb,EAAMa,MAAQ,KACzCR,EAAAC,EAAAC,cAAA,WACCP,EAAMc,MAAQ,UAAYd,EAAMc,MAAQ,KACzCT,EAAAC,EAAAC,cAAA,WACCP,EAAMgB,MAAQ,SAAWhB,EAAMgB,MAAMhB,EAAMc,OAASd,EAAMiB,WAAa,KACxEZ,EAAAC,EAAAC,cAAA,WACCP,EAAMkB,UAAY,aAAelB,EAAMkB,UAAUlB,EAAMc,OAAS,KACjET,EAAAC,EAAAC,cAAA,WACCP,EAAMmB,aAAe,kBAAoBnB,EAAMmB,aAAe,OAInEd,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAW,SAAUX,EAAMoB,WAAYC,GAAMrB,EAAMqB,IAEhEpB,EAEDI,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,IAAW,WAAYX,EAAMe,iBAE5Cb,KCFUoB,cA7Eb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1B,KACD8B,aAAe,CAAC,KAAM,UAAW,WAAY,aAAc,aAF/CP,6EAKjB,IAAMQ,EAAQ,GACdA,EAAMC,KAAK3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACxBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,gBAEF,IAAIyB,EAASP,KAAKQ,aAAa,EAAG,UAClCH,EAAMC,KAAKC,GAEX,IADA,IAAIE,EAAM,GACDC,EAAE,EAAEA,EAAE,GAAGA,IAChBD,EAAIH,KAAKN,KAAKQ,aAAaE,IAE7BL,EAAMC,KAAK3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8B2B,IAExDF,EAASP,KAAKQ,aAAa,GAAI,UAC/BH,EAAMC,KAAKC,GACXE,EAAM,GACN,IAAK,IAAIC,EAAE,GAAGA,EAAE,GAAGA,IACjBD,EAAIH,KAAKN,KAAKQ,aAAaE,IAE7BL,EAAMC,KAAK3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8B2B,IAExDF,EAASP,KAAKQ,aAAa,GAAI,UAC/BH,EAAMC,KAAKC,GACXE,EAAM,GACN,IAAK,IAAIC,EAAE,GAAGA,EAAE,GAAGA,IACjBD,EAAIH,KAAKN,KAAKQ,aAAaE,IAE7BL,EAAMC,KAAK3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAiC2B,IAE3DF,EAASP,KAAKQ,aAAa,GAAI,UAC/BH,EAAMC,KAAKC,GACXE,EAAM,GACN,IAAK,IAAIC,EAAE,GAAGA,EAAE,GAAGA,IACjBD,EAAIH,KAAKN,KAAKQ,aAAaE,IAI7B,OAFAL,EAAMC,KAAK3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6B2B,IAEhDJ,uCAGIK,EAAG5B,GACd,IAAI6B,EAAa,QACjB,GAAIX,KAAK1B,MAAMsC,QAAQF,IAAMV,KAAK1B,MAAMsC,QAAQF,GAAGvB,MAAM,CACvD,IAAIA,EAAQa,KAAK1B,MAAMsC,QAAQF,GAAGvB,MAClCwB,EAAaX,KAAKI,aAAajB,EAAMA,EAAM0B,OAAO,IAGpD,OACElC,EAAAC,EAAAC,cAACiC,EAAD,CACEC,IAAKL,EACLf,GAAI,SAASe,EACbhC,IAAKgC,EACLnB,WAAYS,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGnB,WAAa,EACvEd,QAASuB,KAAK1B,MAAM0C,SAASjC,SAAS2B,GACtC1B,SAAUgB,KAAK1B,MAAM2C,UAAUP,GAC/BhB,UAAWZ,EACXO,cAAeW,KAAK1B,MAAM4C,UAAUR,GACpCxB,YAAayB,EACbxB,MAAOa,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGvB,MAAQ,KAC7DG,MAAOU,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGpB,MAAQ,KAC7DE,UAAWQ,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGlB,UAAY,KACrEC,aAAcO,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGjB,aAAe,KAC3EL,MAAOY,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGtB,MAAQ,KAC7D+B,SAAUnB,KAAK1B,MAAMsC,QAAQF,GAAKV,KAAK1B,MAAMsC,QAAQF,GAAGS,SAAW,wCAMvE,OAAOxC,EAAAC,EAAAC,cAAA,WAAMmB,KAAKoB,sBA3EFC,IAAMC,2BCKpBC,EACJ,SAAAA,EAAYjC,EAAOE,GAA4B,IAAjBC,EAAiB+B,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAAI1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,GAC3CvB,KAAKb,MAAQ,KACba,KAAKV,MAAQA,GAAS,CAAC,GAAI,GAAI,GAAI,IACnCU,KAAKR,UAAYA,GAAa,CAAC,EAAG,EAAG,EAAG,GACxCQ,KAAKP,aAAeA,EACpBO,KAAKZ,MAAQ,EACbY,KAAKmB,SAAW,GAChBnB,KAAKT,WAAa,GAIlBmC,EACJ,SAAAA,EAAYhD,GAAMoB,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,GACd1B,KAAK2B,OAASjD,EACdsB,KAAK4B,KAAO,EACZ5B,KAAK6B,MAAQ,KACb7B,KAAK8B,UAAY,GACjB9B,KAAK+B,SAAW,EAChB/B,KAAKgC,WAAa,UCy1BTC,cAh3Bb,SAAAA,EAAY3D,GAAO,IAAAuB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACjBpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAM1B,KAyFR4D,SAAW,SAACC,GACV,IAAIC,EAAoB,OAAXD,EAAmB,YAApB,UAAAE,OAA4CF,EAA5C,UAEqB,IAA7BtC,EAAKvB,MAAMgE,eAA4BzC,EAAK0C,UAC9CC,IAAKC,KAAK,CACRV,SAAU,MACVW,mBAAmB,EACnBN,MAAOA,EACPO,KAAM,6BACNC,mBAAoB,OACpBC,MAAO,IACPC,YAAa,CACTC,YAAY,EACZX,MAAO,cACPY,MAAO,cACPC,cAAe,kBAGrBpD,EAAKqD,KAAO,KAINrD,EAAKvB,MAAMgE,eAAiBzC,EAAK0C,UACvCC,IAAKC,KAAK,CACRV,SAAU,MACVW,mBAAmB,EACnBN,MAAOA,EACPO,KAAM,oBACNQ,kBAAkB,EAClBP,mBAAoB,OACpBQ,kBAAmB,OACnBC,iBAAkB,OAClBC,kBAAmB,OACnBT,MAAO,IACPC,YAAa,CACTC,YAAY,EACZX,MAAO,cACPY,MAAO,cACPC,cAAe,eACfM,aAAc,kBAEjBC,KAAK,SAACC,GAEHA,EAAOC,MACT7D,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACPC,OAAO,GAETC,QAASlE,EAAKvB,MAAM0F,cAMtBnE,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACPI,SAAS,GAEXF,QAASlE,EAAKvB,MAAM0F,iBApJXnE,EA4JnBqE,eAAiB,SAAC/B,GAClB,IAAIgC,EAAS,CACZC,EAAKvE,EAAKwE,MAAMC,OAChBC,EAAK1E,EAAKwE,MAAMG,QAGH,MAAXrC,GACFgC,EAAO,IAAQ,EACftE,EAAK4E,SAAS,CACbH,OAAQH,EAAO,OAIhBA,EAAO,IAAQ,EACftE,EAAK4E,SAAS,CACbD,OAAQL,EAAO,MAIjBtE,EAAK0C,UAAW,EAChB1C,EAAKqC,SAASC,IAhLKtC,EAmLnB6E,eAAiB,SAAC9D,KAnLCf,EAkNnB8E,QAAU,SAACzB,GAIT,GAHArD,EAAKqD,KAAOA,EACC0B,SAASC,uBAAuB,eAAe,GACrDC,UAAP,GAAAzC,OAAsBxC,EAAKqD,MAAQrD,EAAKvB,MAAMyG,MAAQ,YAAc,mBAChElF,EAAKqD,MAAQrD,EAAKvB,MAAMyG,MAAM,CAChCC,QAAQC,IAAIpF,EAAKqD,KAAMrD,EAAKvB,MAAMyG,MAAO,YAEzC,IAAIG,EAAWN,SAASO,cAAc,aACtCD,EAASE,iBAAiB,QAASvF,EAAKwF,YACxCH,EAASI,UAAW,IA3NLzF,EA+NnB0F,YAAc,SAACC,EAAQT,EAAOU,EAAYC,EAAYC,GAAkB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAArE,EAAA,IACtE,QAAAsE,EAAAC,EAAyBL,EAAzBM,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAuC,KAA9BS,EAA8BN,EAAArC,MACrC4C,cAAYC,QAAQF,EAAc,MAFkC,MAAAG,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,GAWtE,GANAjG,EAAK4E,SAAS,WACZ,MAAO,CAAC7D,QAAS8E,KAEnB7F,EAAK4E,SAAS,WACZ,MAAO,CAACiC,QAASjB,KAEL,QAAVD,EAAiB,CACnB,IAAImB,EAAO/B,SAASO,cAAT,QAAA9C,OAA+B0C,IAC1ClF,EAAK+G,SAAS7B,EAAO4B,EAAM9G,EAAKwE,MAAMqC,QAAQ3B,GAAOhD,YA5OtClC,EAgPnBgH,cAAgB,SAACC,GACf,IAAIC,EAAYlH,EAAKwE,MAAM0C,UAAUD,GACjCE,EAAQD,EAAUE,OAAO,EAAG,GAC5B9H,EAAQU,EAAKwE,MAAMzD,QAAQmG,EAAU,IAAI5H,MAE7C,GAAa,SAAT6H,EAAiB,KAAAE,GAAA,EAAAC,GAAA,EAAAC,OAAA3F,EAAA,IACnB,QAAA4F,EAAAC,EAAgBP,EAAhBd,OAAAC,cAAAgB,GAAAG,EAAAC,EAAAnB,QAAAC,MAAAc,GAAA,EAA0B,KAAjBK,EAAiBF,EAAA3D,MACpBnC,EAAO1B,EAAKwE,MAAMzD,QAAQ2G,GAC9B,GAAIhG,EAAKpC,MAAM,CACb,IACI6C,EADSnC,EAAKwE,MAAMqC,QAAQnF,EAAKpC,MAAMoC,EAAKpC,MAAM0B,OAAO,IACrCmB,WACxBnC,EAAKwE,MAAMzD,QAAQ2G,GAAKhI,WAAxBiI,KAAAC,IAAqC,EAAIzF,EAAW,KANrC,MAAAwE,GAAAW,GAAA,EAAAC,EAAAZ,EAAA,YAAAU,GAAA,MAAAI,EAAAb,QAAAa,EAAAb,SAAA,WAAAU,EAAA,MAAAC,QASf,KAAAM,GAAA,EAAAC,GAAA,EAAAC,OAAAnG,EAAA,IAEJ,QAAAoG,EAAAC,EAAgBf,EAAhBd,OAAAC,cAAAwB,GAAAG,EAAAC,EAAA3B,QAAAC,MAAAsB,GAAA,EAA0B,KAAjBH,EAAiBM,EAAAnE,MACxB,GAAI7D,EAAKwE,MAAMzD,QAAQ2G,GAAKpI,OAASA,EAAM,KAAA4I,GAAA,EAAAC,GAAA,EAAAC,OAAAxG,EAAA,IACzC,QAAAyG,EAAAC,EAAgBpB,EAAhBd,OAAAC,cAAA6B,GAAAG,EAAAC,EAAAhC,QAAAC,MAAA2B,GAAA,EAA0B,KAAjBR,EAAiBW,EAAAxE,MACxB7D,EAAKwE,MAAMzD,QAAQ2G,GAAKhI,WAAa,GAFE,MAAAiH,GAAAwB,GAAA,EAAAC,EAAAzB,EAAA,YAAAuB,GAAA,MAAAI,EAAA1B,QAAA0B,EAAA1B,SAAA,WAAAuB,EAAA,MAAAC,MAHzC,MAAAzB,GAAAmB,GAAA,EAAAC,EAAApB,EAAA,YAAAkB,GAAA,MAAAI,EAAArB,QAAAqB,EAAArB,SAAA,WAAAkB,EAAA,MAAAC,GAeJ,GAAa,UAATZ,EAAkB,KAAAoB,GAAA,EAAAC,GAAA,EAAAC,OAAA7G,EAAA,IACpB,QAAA8G,EAAAC,EAAgBzB,EAAhBd,OAAAC,cAAAkC,GAAAG,EAAAC,EAAArC,QAAAC,MAAAgC,GAAA,EAA0B,KAAjBb,EAAiBgB,EAAA7E,MACxB7D,EAAKwE,MAAMzD,QAAQ2G,GAAKhI,WAAa,GAFnB,MAAAiH,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,YAAA4B,GAAA,MAAAI,EAAA/B,QAAA+B,EAAA/B,SAAA,WAAA4B,EAAA,MAAAC,QAIjB,KAAAG,GAAA,EAAAC,GAAA,EAAAC,OAAAlH,EAAA,IACH,QAAAmH,EAAAC,EAAgB9B,EAAhBd,OAAAC,cAAAuC,GAAAG,EAAAC,EAAA1C,QAAAC,MAAAqC,GAAA,EAA0B,KAAjBlB,EAAiBqB,EAAAlF,MACxB7D,EAAKwE,MAAMzD,QAAQ2G,GAAKhI,WAAa,GAFpC,MAAAiH,GAAAkC,GAAA,EAAAC,EAAAnC,EAAA,YAAAiC,GAAA,MAAAI,EAAApC,QAAAoC,EAAApC,SAAA,WAAAiC,EAAA,MAAAC,OAjRU9I,EA0RnB+G,SAAW,SAAC7B,EAAO4B,EAAMmC,GACvB,IAAIC,EAAYnE,SAASO,cAAT,UAAA9C,OAAiCyG,IACjDnC,EAAKqC,MAAMC,KAAOpJ,EAAKwE,MAAM6E,YAAYnE,GAAUgE,EAAUI,WAAc,KAC3ExC,EAAKqC,MAAMI,IAAMvJ,EAAKwE,MAAMgF,WAAWtE,GAAUgE,EAAUO,UAAa,MA7RvDzJ,EAgSnB0J,OAAS,WACP1J,EAAK2J,OAAQ,EACb,IAAI7D,EAAgB,GACpB,GAAG9F,EAAKqD,OAASrD,EAAKvB,MAAMyG,MAAM,CAEhC,IAAI0E,EAAQC,SAAuB,EAAdlC,KAAKmC,UAAY,EAClCC,EAAQF,SAAuB,EAAdlC,KAAKmC,UAAY,EAClCjI,EAAS7B,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OACvC8E,EAAShK,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAC9C+G,EAAUjJ,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAAW0H,EAAQG,EAGtE,GAAId,EAAS,GAAG,CAEdpH,EAAOG,MAAQH,EAAOG,MAAQ,IAC9B,IAAIwE,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,qCAChBuB,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,GAErByC,GAAkB,GAElB,IAAIvH,EAAO1B,EAAKwE,MAAMzD,QAAQkI,GAC9BpH,EAAOK,SAAY+G,EACnB,IAAInC,EAAO/B,SAASO,cAAT,QAAA9C,OAA+BxC,EAAKvB,MAAMyG,QACrDlF,EAAK+G,SAAS/G,EAAKvB,MAAMyG,MAAO4B,EAAMmC,GAGtC,IAAIzC,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,cAAA1C,OAA0CoH,EAA1C,WAAApH,OAAyDuH,EAAzD,uBAAAvH,OAAoFwH,EAApF,cAAAxH,OAAuGyG,GACvHxC,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,GAEnB,IAAInB,EAAWN,SAASO,cAAc,aAItC,GAHAD,EAAS4E,oBAAoB,QAASjK,EAAKwF,YAC3CH,EAASI,UAAW,EAEhBzF,EAAKwE,MAAMrD,SAASjC,SAAS+J,GAAQ,CAEvC,GAAc,GAAVA,GAAyB,IAAVA,EACjB9D,QAAQC,IAAI,wBACR,GAAI,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,IAAIlG,SAAS+J,GAAQ,CAC3CzC,EAAe,iBACf,IAAI0D,EAAOL,SAAuB,EAAdlC,KAAKmC,UAAY,EACzB,GAARI,GACFrI,EAAOG,MAAQH,EAAOG,MAAQ,IAC9BwE,GAAY,gBAAAhE,OAAoBxC,EAAKvB,MAAMyG,MAA/B,cACRrD,EAAOG,MAAQ,IACjBwE,GAAgB,mBAChB2D,MAAM,eAGQ,GAARD,GACRrI,EAAOG,MAAQH,EAAOG,MAAQ,IAC9BwE,GAAY,mBAAAhE,OAAuBxC,EAAKvB,MAAMyG,MAAlC,qBACI,GAARgF,GACRrI,EAAOE,KAAOF,EAAOE,KAAO,EAC5ByE,GAAY,qCAAAhE,OAAyCxC,EAAKvB,MAAMyG,MAApD,KACRrD,EAAOE,KAAO,IAChBF,EAAOE,KAAO,EACdyE,EAAY,mCAAAhE,OAAsCxC,EAAKvB,MAAMyG,MAAjD,8BAEE,GAARgF,GACRrI,EAAOE,KAAOF,EAAOE,KAAO,EAC5ByE,GAAY,uCAAAhE,OAA2CxC,EAAKvB,MAAMyG,MAAtD,MACI,GAARgF,GACRrI,EAAOG,MAAQH,EAAOG,MAAQ,IAC9BwE,GAAY,mBAAAhE,OAAuBxC,EAAKvB,MAAMyG,MAAlC,sBAEZrD,EAAOE,KAAOF,EAAOE,KAAO,EAC5ByE,GAAY,wCAAAhE,OAA4CxC,EAAKvB,MAAMyG,MAAvD,MAEduB,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,QAEf,GAAI,CAAC,GAAG,IAAItH,SAAS+J,GAAQ,CACjCzC,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,uCACZuB,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,GAEnB,IAAI5C,EAAS5D,EAAKoK,YAAYvI,GAC9B2E,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,WAAA1C,OAAuCoB,EAAOyG,YAA9C,kBAAA7H,OAA0EoB,EAAO0G,aAC7F7D,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,GAEjBA,EADE5C,EAAO2G,YAAc3G,EAAO4G,YAClB,UAAAhI,OAAaxC,EAAKvB,MAAMyG,MAAxB,qBAAA1C,OAAiDxC,EAAKvB,MAAMyG,MAA5D,oBAEA,yBAAA1C,OAA4BxC,EAAKvB,MAAMyG,MAAvC,qBAEduB,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,QACf,GAAc,GAAVyC,EAAY,CACpB,IAAIwB,EAAMZ,SAAwB,GAAfhI,EAAOG,OAC1BH,EAAOG,MAAQH,EAAOG,MAAQyI,EAC9BjE,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,4BAAA1C,OAAwDiI,EAAxD,KACZhE,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,OAChB,CACH,IAAIiE,EAAMZ,SAAwB,GAAfhI,EAAOG,OAC1BH,EAAOG,MAAQH,EAAOG,MAAQyI,EAC9BjE,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,4BAAA1C,OAAwDiI,EAAxD,KACZhE,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,GAGrB,IAAIkE,EAAgB3F,SAASO,cAAc,kBAC3CoF,EAAcnF,iBAAiB,QAASvF,EAAK2K,iBAC7CD,EAAcjF,UAAW,OAKzB,GAAK/D,EAAKpC,MASR,GAAIoC,EAAKpC,OAAS,UAAUU,EAAKvB,MAAMyG,MAAM,CAE3C,GAAoC,UAAhClF,EAAKwE,MAAMnD,UAAU4H,IAAuD,SAAhCjJ,EAAKwE,MAAMnD,UAAU4H,GAAmB,CACxF,IAAI2B,EAAgB7F,SAASO,cAAc,kBAC3CsF,EAAcrF,iBAAiB,QAASvF,EAAK6K,iBAC7CD,EAAcnF,UAAW,EAGzB,IAAIqF,EAAgB/F,SAASO,cAAc,kBAC3CwF,EAAcvF,iBAAiB,QAASvF,EAAK+K,iBAC7CD,EAAcrF,UAAW,EAEzB,IAAIiF,EAAgB3F,SAASO,cAAc,kBAC3CoF,EAAcnF,iBAAiB,QAASvF,EAAK2K,iBAC7CD,EAAcjF,UAAW,MAEtB,CAEH,IAAIuF,EAAYjG,SAASO,cAAc,cACvC0F,EAAUzF,iBAAiB,QAASvF,EAAKiL,aACzCD,EAAUvF,UAAW,EACrB,IAAIyF,EAAgBnG,SAASO,cAAc,kBAC3C4F,EAAc3F,iBAAiB,QAASvF,EAAKmL,iBAC7CD,EAAczF,UAAW,MAhCb,CAEd,IAAI2F,EAAiBrG,SAASO,cAAc,mBAC5C8F,EAAe7F,iBAAiB,QAASvF,EAAKqL,kBAC9CD,EAAe3F,UAAW,EAC1B,IAAIiF,EAAgB3F,SAASO,cAAc,kBAC3CoF,EAAcnF,iBAAiB,QAASvF,EAAK2K,iBAC7CD,EAAcjF,UAAW,EAgC7BzF,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,OACRtC,KAAMrD,EAAKqD,KACX6B,MAAOlF,EAAKvB,MAAMyG,MAClB2B,QAAS7G,EAAKwE,MAAMqC,QACpB9F,QAASf,EAAKwE,MAAMzD,QACpBuK,OAAQxF,GAEV5B,QAASlE,EAAKvB,MAAM0F,mBAGtBsC,cAAY8E,MAAM,iBAjcHvL,EAqcnBwL,WAAa,WACX,IAEIhF,EAFAS,EAAMjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAC3CR,EAAO1B,EAAKwE,MAAMzD,QAAQkG,GAE1BnB,EAAgB,GACpB,GAAG9F,EAAKqD,MAAQrD,EAAKvB,MAAMyG,OAAUxD,EAAKpC,MAyCxCmH,cAAY8E,MAAM,oBAzC4B,CAC1CvL,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOlD,MAAQhC,EAAKwE,MAAMpD,UAAU6F,IACpET,EAAe,UAAYxG,EAAKvB,MAAMyG,MAAQ,0BAC9CuB,cAAY8E,MAAM/E,GAClBV,EAAcrF,KAAK+F,KAEnBxG,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOlD,MAAQhC,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOlD,MAAQhC,EAAKwE,MAAMpD,UAAU6F,GAC/GjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOjD,UAAUxB,KAAKwG,GACpDjH,EAAKwE,MAAMzD,QAAQkG,GAAK3H,MAAQ,UAAYU,EAAKvB,MAAMyG,MACnD,CAAC,EAAE,GAAG,GAAG,IAAIhG,SAAS+H,KACxBjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAO/C,YAAc,GAErDnC,EAAKgH,cAAcC,GAEnBT,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,qBAAA1C,OAAiDyE,EAAjD,UAAAzE,OAA6DxC,EAAKwE,MAAMpD,UAAU6F,IAC9FR,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,IAIrB,IAAI4E,EAAiBrG,SAASO,cAAc,mBACxCoF,EAAgB3F,SAASO,cAAc,kBAE3C8F,EAAenB,oBAAoB,QAASjK,EAAKqL,kBACjDD,EAAe3F,UAAW,EAC1BiF,EAAcnF,iBAAiB,QAASvF,EAAK2K,iBAC7CD,EAAcjF,UAAW,EAGzBzF,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,WACRtC,KAAMrD,EAAKqD,KACX6B,MAAOlF,EAAKvB,MAAMyG,MAClB2B,QAAS7G,EAAKwE,MAAMqC,QACpB9F,QAASf,EAAKwE,MAAMzD,QACpBuK,OAAQxF,GAEV5B,QAASlE,EAAKvB,MAAM0F,gBAhfPnE,EAufnByL,MAAQ,WACN,IAGIjF,EAHAkF,EAAQ1L,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OACtC+B,EAAMjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAC3CR,EAAO1B,EAAKwE,MAAMzD,QAAQkG,GAE1BnB,EAAgB,GACpB,GAAG9F,EAAKqD,OAASrD,EAAKvB,MAAMyG,OAASxD,EAAKpC,OAASoC,EAAKpC,OAAO,UAAUU,EAAKvB,MAAMyG,MAAM,CACxF,IAAIyG,EAAY3L,EAAKwE,MAAMqC,QAAQnF,EAAKpC,MAAMoC,EAAKpC,MAAM0B,OAAO,IAC5D0K,EAAM1J,MAAQN,EAAKjC,MAAMiC,EAAKnC,QAEhCiH,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,eACZuB,cAAY8E,MAAM/E,GAClBV,EAAcrF,KAAK+F,KAEnBkF,EAAM1J,MAAQ0J,EAAM1J,MAAQN,EAAKjC,MAAMiC,EAAKnC,OAC5CoM,EAAU3J,MAAQ2J,EAAU3J,MAAQN,EAAKjC,MAAMiC,EAAKnC,OACpDiH,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,iBAAA1C,OAA6Cd,EAAKpC,MAAMoC,EAAKpC,MAAM0B,OAAO,GAA1E,MAAAwB,OAAiFd,EAAKjC,MAAMiC,EAAKnC,QAC7GkH,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,IAIrB,IAAIwE,EAAYjG,SAASO,cAAc,cACnC4F,EAAgBnG,SAASO,cAAc,kBACvCoF,EAAgB3F,SAASO,cAAc,kBAE3C4F,EAAcjB,oBAAoB,QAASjK,EAAKmL,iBAChDD,EAAczF,UAAW,EACzBuF,EAAUf,oBAAoB,QAASjK,EAAKiL,aAC5CD,EAAUvF,UAAW,EACrBiF,EAAcnF,iBAAiB,QAASvF,EAAK2K,iBAC7CD,EAAcjF,UAAW,EAGzBzF,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,MACRtC,KAAMrD,EAAKqD,KACX6B,MAAOlF,EAAKvB,MAAMyG,MAClB2B,QAAS7G,EAAKwE,MAAMqC,QACpB9F,QAASf,EAAKwE,MAAMzD,QACpBuK,OAAQxF,GAEV5B,QAASlE,EAAKvB,MAAM0F,mBAGtBsC,cAAY8E,MAAM,iBAriBHvL,EAyiBnB4L,UAAY,WACV,IAGIpF,EAHAS,EAAMjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAC3CR,EAAO1B,EAAKwE,MAAMzD,QAAQkG,GAC1BpF,EAAS7B,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAEvCY,EAAgB,GACpB,GAAG9F,EAAKqD,OAASrD,EAAKvB,MAAMyG,OAASxD,EAAKpC,OAAO,UAAYU,EAAKvB,MAAMyG,MAAM,CACxExD,EAAKnC,OAAS,GAChBiH,EAAY,QAAAhE,OAAWyE,EAAX,4BACZR,cAAY8E,MAAM/E,GAClBV,EAAcrF,KAAK+F,IACX3E,EAAOG,MAAQN,EAAK9B,cAC5B4G,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,2BACZuB,cAAY8E,MAAM/E,GAClBV,EAAcrF,KAAK+F,KAEnB3E,EAAOG,OAASN,EAAK9B,aACrB8B,EAAKnC,OAAS,EACdiH,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,mBAAA1C,OAA+CyE,EAA/C,cAAAzE,OAA+Dd,EAAKnC,OAChFkH,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,IAIrB,IAAIoE,EAAgB7F,SAASO,cAAc,kBAC3CsF,EAAcX,oBAAoB,QAASjK,EAAK6K,iBAChDD,EAAciB,SAAU,EAGxB7L,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,UACRtC,KAAMrD,EAAKqD,KACX6B,MAAOlF,EAAKvB,MAAMyG,MAClB2B,QAAS7G,EAAKwE,MAAMqC,QACpB9F,QAASf,EAAKwE,MAAMzD,QACpBuK,OAAQxF,GAEV5B,QAASlE,EAAKvB,MAAM0F,mBAGtBsC,cAAY8E,MAAM,iBAllBHvL,EAslBnBoK,YAAc,SAAC0B,GAKb,IAJA,IAAIzB,EAAc,GACdC,EAAc,GACdC,EAAc,EACdC,EAAc,EACT3J,EAAE,EAAEA,EAAEiL,EAAS/J,KAAKlB,IAAI,CAC/B,IAAIqJ,EAAOL,SAAuB,EAAdlC,KAAKmC,UAAY,EACrCO,EAAY5J,KAAKyJ,GACjBK,GAAeL,EAEjB,IAAK,IAAIrJ,EAAE,EAAEA,EAAEiL,EAAS/J,KAAKlB,IAAI,CAC/B,IAAIqJ,EAAOL,SAAuB,EAAdlC,KAAKmC,UAAY,EACrCQ,EAAY7J,KAAKyJ,GACjBM,GAAeN,EAOjB,OALIK,EAAcC,EAChBsB,EAAS9J,OAAS,IAElB8J,EAAS9J,OAAS,IAEb,CACLuI,YAAaA,EACbC,YAAaA,EACbH,YAAaA,EACbC,YAAaA,IA9mBEtK,EAknBnB+L,MAAQ,SAACD,EAAUxM,EAAO2H,GAOxB,IANA,IAAIvF,EAAO1B,EAAKwE,MAAMzD,QAAQkG,GAC1BoD,EAAc,GACdC,EAAc,GACdC,EAAc,EACdC,EAAc,EACdwB,EAAW,EACNnL,EAAE,EAAEA,EAAEiL,EAAS/J,KAAKlB,IAAI,CAC/B,IAAIqJ,EAAOL,SAAuB,EAAdlC,KAAKmC,UAAY,EACrCO,EAAY5J,KAAKyJ,GACjBK,GAAeL,EAEjB,IAAK,IAAIrJ,EAAE,EAAEA,EAAEa,EAAK/B,UAAU+B,EAAKnC,OAAOsB,IAAI,CAC5C,IAAIqJ,EAAOL,SAAuB,EAAdlC,KAAKmC,UAAY,EACrCQ,EAAY7J,KAAKyJ,GACjBM,GAAeN,EAEjB,GAAIK,EAAcC,EAAa,CAC3B9I,EAAKpC,MAAQ,UAAYwM,EAAShK,OAClCgK,EAAS7J,UAAUxB,KAAKwG,GAGxB,IAAIgF,GAAU,EACd,IAAK,IAAIvE,KAAOpI,EAAM2C,UACpB,GAAI3C,EAAM2C,UAAUyF,IAAQT,EAAI,CAC9B3H,EAAM2C,UAAUmF,OAAOM,EAAK,GAC5BuE,GAAU,EACV,MAGCA,GAAU9B,MAAM,kBAEjB,CAAC,EAAE,GAAG,GAAG,IAAIjL,SAAS+H,KACxB6E,EAAS3J,YAAc,EACvB7C,EAAM6C,YAAa,GAErBnC,EAAKgH,cAAcC,QAErB+E,EAAWnC,SAASiC,EAAS/J,KAAO,GACpC+J,EAAS/J,MAAQiK,EAEnB,MAAO,CACHzB,YAAaA,EACbC,YAAaA,EACbH,YAAaA,EACbC,YAAaA,EACb0B,SAAUA,IAhqBGhM,EAoqBnBkM,UAAY,WACV,IAGI1F,EAHAsF,EAAW9L,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OACzC+B,EAAMjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAC3CR,EAAO1B,EAAKwE,MAAMzD,QAAQkG,GAE1BnB,EAAgB,GACpB,GAAG9F,EAAKqD,OAASrD,EAAKvB,MAAMyG,OAASxD,EAAKpC,OAASoC,EAAKpC,OAAO,UAAUU,EAAKvB,MAAMyG,MAAM,CACxF,IAAI5F,EAAQU,EAAKwE,MAAMqC,QAAQnF,EAAKpC,MAAMoC,EAAKpC,MAAM0B,OAAO,IAExD4C,EAAS5D,EAAK+L,MAAMD,EAAUxM,EAAO2H,GAEzCT,EAAY,WAAAhE,OAAcsJ,EAAShK,OAAvB,mBAAAU,OAA+CsJ,EAAS/J,KAAxD,uBAAAS,OAAkFd,EAAK/B,UAAU+B,EAAKnC,OAAtG,cACZuG,EAAcrF,KAAK+F,GACnBC,cAAYC,QAAQF,EAAc,KAClCA,EAAY,WAAAhE,OAAcsJ,EAAShK,OAAvB,WAAAU,OAAuCoB,EAAOyG,YAAY8B,KAAK,MAA/D,gBAAA3J,OAAmFoB,EAAO2G,YAA1F,KACZzE,EAAcrF,KAAK+F,GACnBC,cAAYC,QAAQF,EAAc,KAClCA,EAAY,WAAAhE,OAAclD,EAAMwC,OAApB,WAAAU,OAAoCoB,EAAO0G,YAAY6B,KAAK,MAA5D,gBAAA3J,OAAgFoB,EAAO4G,YAAvF,KACZ1E,EAAcrF,KAAK+F,GACnBC,cAAYC,QAAQF,EAAc,KAGlC,IAAIwE,EAAYjG,SAASO,cAAc,cACnC4F,EAAgBnG,SAASO,cAAc,kBACvCoF,EAAgB3F,SAASO,cAAc,kBAEvC1B,EAAO2G,YAAc3G,EAAO4G,aAC9BhE,EAAY,UAAAhE,OAAayE,EAAb,2BAAAzE,OAA0CsJ,EAAShK,OAAnD,KACZgE,EAAcrF,KAAK+F,GACnBC,cAAYC,QAAQF,EAAc,KAElC0E,EAAcjB,oBAAoB,QAASjK,EAAKmL,iBAChDD,EAAczF,UAAW,EACzBuF,EAAUf,oBAAoB,QAASjK,EAAKiL,aAC5CD,EAAUvF,UAAW,EACrBiF,EAAcnF,iBAAiB,QAASvF,EAAK2K,iBAC7CD,EAAcjF,UAAW,IAEzBe,EAAY,WAAAhE,OAAcsJ,EAAShK,OAAvB,UAAAU,OAAsCoB,EAAOoI,SAA7C,eACZlG,EAAcrF,KAAK+F,GACnBC,cAAYC,QAAQF,EAAc,KAElC0E,EAAcjB,oBAAoB,QAASjK,EAAKmL,iBAChDD,EAAczF,UAAW,GAI3BzF,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,UACRtC,KAAMrD,EAAKqD,KACX6B,MAAOlF,EAAKvB,MAAMyG,MAClB2B,QAAS7G,EAAKwE,MAAMqC,QACpB9F,QAASf,EAAKwE,MAAMzD,QACpBuK,OAAQxF,GAEV5B,QAASlE,EAAKvB,MAAM0F,mBAGtBsC,cAAY8E,MAAM,iBA/tBHvL,EAmuBnBoM,UAAY,WACV,IAGI5F,EAHAS,EAAMjH,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAAOhD,SAC3CR,EAAO1B,EAAKwE,MAAMzD,QAAQkG,GAC1BpF,EAAS7B,EAAKwE,MAAMqC,QAAQ7G,EAAKvB,MAAMyG,OAEvCY,EAAgB,GAEpB,GAAG9F,EAAKqD,OAASrD,EAAKvB,MAAMyG,OAASxD,EAAKpC,OAASoC,EAAKpC,OAAO,UAAUU,EAAKvB,MAAMyG,MAAM,CACpFrD,EAAOG,MAAQhC,EAAKqM,WAEtB7F,EAAe,UAAYxG,EAAKvB,MAAMyG,MAAQ,0BAC9CuB,cAAY8E,MAAM/E,GAClBV,EAAcrF,KAAK+F,KAEnB3E,EAAOG,OAAShC,EAAKqM,UACrBxK,EAAOE,MAAQ,EACfyE,EAAY,UAAAhE,OAAaxC,EAAKvB,MAAMyG,MAAxB,+BAAA1C,OAA2DxC,EAAKqM,WAC5E5F,cAAYC,QAAQF,EAAc,KAClCV,EAAcrF,KAAK+F,IAGrB,IAAIsE,EAAgB/F,SAASO,cAAc,kBAC3CwF,EAAcb,oBAAoB,QAASjK,EAAK+K,iBAChDD,EAAce,SAAU,EAGxB7L,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,UACRtC,KAAMrD,EAAKqD,KACX6B,MAAOlF,EAAKvB,MAAMyG,MAClB2B,QAAS7G,EAAKwE,MAAMqC,QACpB9F,QAASf,EAAKwE,MAAMzD,QACpBuK,OAAQxF,GAEV5B,QAASlE,EAAKvB,MAAM0F,mBAGtBsC,cAAY8E,MAAM,iBAzwBHvL,EA6wBnBsM,QAAU,WACRtM,EAAKqD,KAAsB,MAAdrD,EAAKqD,KAAgB,IAAM,IAExC,IAAIqH,EAAgB3F,SAASO,cAAc,kBAC3CoF,EAAcT,oBAAoB,QAASjK,EAAK2K,iBAChDD,EAAcjF,UAAW,EACzB,IAAImF,EAAgB7F,SAASO,cAAc,kBACb,GAA1BsF,EAAcnF,WAChBmF,EAAcX,oBAAoB,QAASjK,EAAK6K,iBAChDD,EAAcnF,UAAW,GAE3B,IAAIqF,EAAgB/F,SAASO,cAAc,kBACb,GAA1BwF,EAAcrF,WAChBqF,EAAcb,oBAAoB,QAASjK,EAAK+K,iBAChDD,EAAcrF,UAAW,GAE3B,IAAI2F,EAAiBrG,SAASO,cAAc,mBACb,GAA3B8F,EAAe3F,WACjB2F,EAAenB,oBAAoB,QAASjK,EAAKqL,kBACjDD,EAAe3F,UAAW,GAG5BzF,EAAKvB,MAAMqF,OAAOC,QAAQ,CACxBC,QAAS,CACP2B,OAAQ,WACRT,MAAOlF,EAAKvB,MAAMyG,MAClB7B,KAAMrD,EAAKqD,MAEba,QAASlE,EAAKvB,MAAM0F,eAtyBtB,IADA,IAAI0B,EAAa,GACRhF,EAAE,EAAEA,EAAE,GAAGA,IAChBgF,EAAWpF,KAAK,IAAIiB,GAJL,OAMjB1B,EAAKwE,MAAQ,CACXzD,QAAS8E,EACTgB,QAAS,CAAC,KAAM,IAAIhF,EAAO,GAAI,IAAIA,EAAO,IAC1CwH,YAAa,CAAC,KAAM,GAAI,GAAI,GAAI,IAChCG,WAAY,CAAC,KAAM,GAAI,GAAI,GAAI,IAC/BpI,UAAW,CACT,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KACpF,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,KAE/EC,UAAW,CACT,KAAK,QAAQ,KAAK,QAAQ,OAAO,QAAQ,OAAO,KAAK,OAAO,OAC5D,KAAK,OAAO,SAAS,OAAO,OAAO,QAAQ,SAAS,KAAK,SAAS,SAClE,KAAK,MAAM,KAAK,MAAM,MAAM,QAAQ,SAAS,SAAS,SAAS,SAC/D,KAAK,QAAQ,QAAQ,KAAK,QAAQ,QAAQ,KAAK,WAAW,KAAK,YAEjEF,SAAU,CACR,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAE/B+F,UAAW,CACT3C,EAAI,CAAC,QAAS,EAAG,GACjBgI,EAAI,CAAC,QAAS,EAAG,GACjBC,EAAI,CAAC,OAAQ,EAAG,EAAG,GACnBC,EAAI,CAAC,OAAQ,EAAG,EAAG,GACnBC,EAAI,CAAC,OAAQ,EAAG,EAAG,GACnBC,GAAK,CAAC,OAAQ,GAAI,GAAI,IACtBC,GAAK,CAAC,OAAQ,GAAI,GAAI,IACtBC,GAAK,CAAC,OAAQ,GAAI,GAAI,IACtBC,GAAK,CAAC,SAAU,GAAI,GAAI,IACxBC,GAAK,CAAC,SAAU,GAAI,GAAI,IACxBC,GAAK,CAAC,SAAU,GAAI,GAAI,IACxBC,GAAK,CAAC,MAAO,GAAI,GAAI,IACrBC,GAAK,CAAC,MAAO,GAAI,GAAI,IACrBC,GAAK,CAAC,MAAO,GAAI,GAAI,IACrBC,GAAK,CAAC,SAAU,GAAI,GAAI,IACxBC,GAAK,CAAC,SAAU,GAAI,GAAI,IACxBC,GAAK,CAAC,SAAU,GAAI,GAAI,IACxBC,GAAK,CAAC,QAAS,GAAI,GAAI,IACvBC,GAAK,CAAC,QAAS,GAAI,GAAI,IACvBC,GAAK,CAAC,QAAS,GAAI,GAAI,IACvBC,GAAK,CAAC,WAAY,GAAI,IACtBC,GAAK,CAAC,WAAY,GAAI,IACtBC,GAAK,CAAC,SAAU,GAAI,IACpBC,GAAK,CAAC,SAAU,GAAI,IACpBC,EAAI,CAAC,QAAS,EAAG,GAAI,GAAI,IACzBC,GAAK,CAAC,QAAS,EAAG,GAAI,GAAI,IAC1BC,GAAK,CAAC,QAAS,EAAG,GAAI,GAAI,IAC1BC,GAAK,CAAC,QAAS,EAAG,GAAI,GAAI,MAI9BjO,EAAKqD,KAAO,IACZrD,EAAK0C,UAAW,EAChB1C,EAAKkO,QAAU,EACflO,EAAK2J,OAAQ,EACb3J,EAAKqM,UAAY,IAEjBrM,EAAKwF,WAAa,WAAOxF,EAAK0J,UAC9B1J,EAAKiL,YAAc,WAAOjL,EAAKyL,SAC/BzL,EAAKqL,iBAAmB,WAAOrL,EAAKwL,cACpCxL,EAAK2K,gBAAkB,WAAO3K,EAAKsM,WACnCtM,EAAK6K,gBAAkB,WAAO7K,EAAK4L,aACnC5L,EAAKmL,gBAAkB,WAAOnL,EAAKkM,aACnClM,EAAK+K,gBAAkB,WAAO/K,EAAKoM,aApElBpM,mFAuEA,IAAAmO,EAAAhO,KACjBA,KAAK1B,MAAMqF,OAAOsK,WAAWjO,KAAK1B,MAAM0F,YAAa,SAACkK,GAEpDlJ,QAAQC,IAAI,QAASiJ,EAAIrK,QAAQX,KAAM,WAAY8K,EAAK1P,MAAMyG,OAE3DiJ,EAAK9K,MAAQ8K,EAAK1P,MAAMyG,QACC,QAAtBmJ,EAAIrK,QAAQ2B,OACdwI,EAAKzI,YAAY2I,EAAIrK,QAAQ2B,OAAQ0I,EAAIrK,QAAQkB,MAAOmJ,EAAIrK,QAAQ6C,QAASwH,EAAIrK,QAAQjD,QAASsN,EAAIrK,QAAQsH,QACtG,CAAC,WAAY,MAAO,UAAU,UAAU,WAAWpM,SAASmP,EAAIrK,QAAQ2B,QAChFwI,EAAKzI,YAAY2I,EAAIrK,QAAQ2B,OAAQ0I,EAAIrK,QAAQkB,MAAOmJ,EAAIrK,QAAQ6C,QAASwH,EAAIrK,QAAQjD,QAASsN,EAAIrK,QAAQsH,QAChF,YAAtB+C,EAAIrK,QAAQ2B,OACpBwI,EAAKrJ,QAAQuJ,EAAIrK,QAAQX,MAEzB8B,QAAQC,IAAIiJ,EAAIrK,6CA2tBtB,IAAIsK,EAEAjJ,EAMJ,OATAF,QAAQC,IAAI,UAEZkJ,EAAM,GAAA9L,OAAMrC,KAAK1B,MAAMyG,OAAS/E,KAAKkD,KAAO,YAAc,mBAGxDgC,EADElF,KAAK1B,MAAMyG,OAAS/E,KAAKkD,MAAQlD,KAAKwJ,OAA6B,KAApBxJ,KAAK1B,MAAMyG,MACjDpG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,KAAKsP,QAASpO,KAAKqF,YAArC,OAEA1G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,KAAKwG,UAAQ,GAA/B,OAGX3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACwP,EAAD,CACIzN,QAASZ,KAAKqE,MAAMzD,QACpBK,UAAWjB,KAAKqE,MAAMpD,UACtBC,UAAWlB,KAAKqE,MAAMnD,UACtBF,SAAUhB,KAAKqE,MAAMrD,YAG3BrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,GAAG,SAAzB,YACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,GAAG,SAAzB,YACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACVqP,GAEHxP,EAAAC,EAAAC,cAAA,6BAAqBmB,KAAK1B,MAAMyG,OAChCpG,EAAAC,EAAAC,cAACyP,EAAA,gBAAD,CAAiBC,MAAOjI,gBACvBpB,EACDvG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWwG,UAAQ,GAArC,iBACA3G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMwG,UAAQ,GAAhC,YACA3G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUwG,UAAQ,GAApC,gBACA3G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUwG,UAAQ,GAApC,oBACA3G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUwG,UAAQ,GAApC,oBACA3G,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUwG,UAAQ,GAApC,YACA3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAEEH,EAAAC,EAAAC,cAAA,WAFF,cAGcmB,KAAKqE,MAAMqC,QAAQ,GAAG5E,UAAUjB,OAC5ClC,EAAAC,EAAAC,cAAA,WAJF,mBAKmBmB,KAAKqE,MAAMqC,QAAQ,GAAG1E,WACvCrD,EAAAC,EAAAC,cAAA,WANF,cAOcmB,KAAKqE,MAAMqC,QAAQ,GAAG9E,KAClCjD,EAAAC,EAAAC,cAAA,WARF,UASUmB,KAAKqE,MAAMqC,QAAQ,GAAG7E,OAEhClD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WAEEH,EAAAC,EAAAC,cAAA,WAFF,cAGcmB,KAAKqE,MAAMqC,QAAQ,GAAG5E,UAAUjB,OAC5ClC,EAAAC,EAAAC,cAAA,WAJF,mBAKmBmB,KAAKqE,MAAMqC,QAAQ,GAAG1E,WACvCrD,EAAAC,EAAAC,cAAA,WANF,cAOcmB,KAAKqE,MAAMqC,QAAQ,GAAG9E,KAClCjD,EAAAC,EAAAC,cAAA,WARF,UASUmB,KAAKqE,MAAMqC,QAAQ,GAAG7E,MAC9BlD,EAAAC,EAAAC,cAAA,sBAv2BKwC,IAAMC,6CCsPVkN,qBAnPb,SAAAA,EAAYlQ,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwO,IACjB3O,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0O,GAAArO,KAAAH,KAAM1B,KAmDRmQ,cAAgB,SAACC,GAEf7O,EAAK8O,OAASC,IAAQC,WAAWC,UAAU,EAAE,GAC7CjP,EAAKkP,aAAe,mBAAqBlP,EAAK8O,OAE9C9O,EAAK8D,OAAOqL,UAAU,CACpBC,SAAU,CAACpP,EAAKkP,cAChBG,cAAc,IAIlB1M,IAAKC,KAAK,CACRV,SAAU,MACVW,mBAAmB,EACnBN,MAAO,sCACPO,KAAM9C,EAAK8O,OACX9L,MAAO,IACPsM,QAAS,QAETrM,YAAa,CACTC,YAAY,EACZX,MAAO,cACPY,MAAO,cACPC,cAAe,kBAInBpD,EAAK4E,SAAS,CACZM,MAAO,IACPzC,eAAe,EACf8M,YAAY,EACZC,QAAQ,KAnFOxP,EAwFnByP,YAAc,SAACZ,GACblM,IAAKC,KAAK,CACRV,SAAU,MACVwN,MAAO,OACP7M,mBAAmB,EACnB8M,iBAAkB,oBAClBrM,kBAAkB,EAClBP,mBAAoB,OACpBU,kBAAmB,KACnBT,MAAO,IACPsM,QAAS,QACTrM,YAAa,CACXC,YAAY,EACZC,MAAO,cACPC,cAAe,qBACfM,aAAc,uBAEfC,KAAK,SAACC,GAEJA,EAAOC,OACR7D,EAAK4P,SAAShM,EAAOC,UA5GR7D,EAkHnB4P,SAAW,SAAC/L,GACV7D,EAAK8O,OAASjL,EACd7D,EAAKkP,aAAe,mBAAqBlP,EAAK8O,OAG9C9O,EAAK8D,OAAO+L,QAAQ,CAClBT,SAAU,CAACpP,EAAKkP,gBACfvL,KAAK,SAACmM,GACFA,EAASC,eAAiB,GAC3B/P,EAAK8D,OAAOqL,UAAU,CACpBC,SAAU,CAACpP,EAAKkP,cAChBG,cAAc,IAGhBrP,EAAK4E,SAAS,CACZM,MAAO,MAGTlF,EAAK8D,OAAOC,QAAQ,CAClBC,QAAS,CACPgM,gBAAgB,GAElB9L,QAASlE,EAAKkP,gBAKhBvM,IAAKC,KAAK,CACRV,SAAU,MACVW,mBAAmB,EACnBN,MAAO,QACPO,KAAM,sCACNE,MAAO,IACPsM,QAAS,QACTrM,YAAa,CACTC,YAAY,EACZX,MAAO,cACPY,MAAO,cACPC,cAAe,oBAIxB6M,MAAM,SAAC1E,GACRpG,QAAQC,IAAImG,MA7JGvL,EAkKnBoE,QAAU,WACRpE,EAAK4E,SAAS,CACZM,MAAO,GACPgL,WAAW,EACXzN,eAAe,EACf8M,YAAY,EACZC,QAAQ,IAGVxP,EAAKkP,aAAe,KACpBlP,EAAKmE,YAAc,KACnBnE,EAAK8O,OAAS,KAEd9O,EAAK8D,OAAOqM,YAAY,CACtBf,SAAW,CAACpP,EAAKkP,aAAclP,EAAKmE,gBA9KtCnE,EAAK8D,OAAS,IAAIsM,IAAY,CAC5BC,WAAY,6CACZC,aAAc,+CAGhBtQ,EAAKwE,MAAQ,CACXU,MAAO,GACPgL,WAAW,EACXzN,eAAe,EACf8M,YAAY,EACZC,QAAQ,GAGVxP,EAAKkP,aAAe,KACpBlP,EAAKmE,YAAc,KACnBnE,EAAK8O,OAAS,KACd9O,EAAK8D,OAAOyM,KAAZtQ,OAAAuQ,EAAA,EAAAvQ,CAAAD,IAlBiBA,sFAsBjBG,KAAK2D,OAAOqM,YAAY,CACtBf,SAAW,CAACjP,KAAK+O,aAAc/O,KAAKgE,4DAInB,IAAAgK,EAAAhO,KAEK,MAArBA,KAAK+O,cACN/O,KAAK2D,OAAOsK,WAAWjO,KAAK+O,aAAc,SAACb,GAEtCA,EAAIrK,QAAQgM,iBAEb7B,EAAKhK,YAAc,kBAAoBgK,EAAKW,OAE5CX,EAAKrK,OAAOqL,UAAU,CACpBC,SAAU,CAACjB,EAAKhK,eAGlBgK,EAAKvJ,SAAS,CACZsL,WAAW,IAIbvN,IAAK8N,4CAuIJ,IAAAC,EAAAvQ,KACP,OACIrB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,yBAICmB,KAAKqE,MAAM0L,WACZpR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVwG,SAAUtF,KAAKqE,MAAM+K,WACrBhB,QAAS,SAACM,GAAD,OAAO6B,EAAK9B,kBAHvB,WAMA9P,EAAAC,EAAAC,cAAA,UACEC,UAAU,cACVsP,QAAS,SAACM,GAAD,OAAO6B,EAAKjB,gBAFvB,UAMJ3Q,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACwP,EAAD,CACIzN,QAAS,EACTK,UAAW,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KAC9F,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,KAE/EC,UAAW,CACT,KAAK,QAAQ,KAAK,QAAQ,OAAO,QAAQ,OAAO,KAAK,OAAO,OAC5D,KAAK,OAAO,SAAS,OAAO,OAAO,QAAQ,SAAS,KAAK,SAAS,SAClE,KAAK,MAAM,KAAK,MAAM,MAAM,QAAQ,SAAS,SAAS,SAAS,SAC/D,KAAK,QAAQ,QAAQ,KAAK,QAAQ,QAAQ,KAAK,WAAW,KAAK,YAEjEF,SAAU,CACR,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,OAIrCrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,GAAG,SAAzB,YACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,GAAG,SAAzB,aAKFK,KAAKqE,MAAM0L,WACXpR,EAAAC,EAAAC,cAAC2R,EAAD,CACE7M,OAAQ3D,KAAK2D,OACbK,YAAahE,KAAKgE,YAClBe,MAAO/E,KAAKqE,MAAMU,MAClBzC,cAAetC,KAAKqE,MAAM/B,cAC1B+M,OAAQrP,KAAKqE,MAAMgL,OACnBoB,UAAWzQ,KAAKqE,MAAMoM,UACtBC,UAAW1Q,KAAKqE,MAAMqM,UACtBzM,QAASjE,KAAKiE,kBA5OV3C,cCJlBqP,IAASC,OAAOjS,EAAAC,EAAAC,cAACgS,EAAD,MAASjM,SAASkM,eAAe","file":"static/js/main.acc46d3f.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport './Board.css';\n\nconst Square = props => {\n  let face;\n  let detail;\n  if (props.special){\n    if (props.num == 0){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>Start!</b>\n    </div>\n    }else if ([2,7,17,22,33,36].includes(props.num)){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b className=\"random\">?</b>\n    </div>\n    }else if (props.num == 20){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>Stay for free</b>\n    </div>\n    }else if ([10,30].includes(props.num)){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>Street thugs!</b>\n    </div>\n    }else if (props.num == 4){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>10% tax!</b>\n    </div>\n    }else{\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>20% tax!</b>\n    </div>\n    }\n  }else{\n    face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      {props.buyPrice ? \"$\" + props.buyPrice : null}\n      <br></br>\n      <div className={classnames(\"owner\", props.playerColor)}>{props.owner ? \"owner: \" + props.owner : null}</div>\n      <br></br>\n      {props.level ? \"level: \" + props.level : null}\n    </div>;\n\n    detail = \n    <div className={classnames('detail', props.provinceColor)}>\n      #{props.num}\n      <br></br>\n      {props.buyPrice ? \"$\" + props.buyPrice : null}\n      <br></br>\n      {props.owner ? \"owner: \" + props.owner : null}\n      <br></br>\n      {props.level ? \"level: \" + props.level : null}\n      <br></br>\n      {props.rents ? \"rent: \" + props.rents[props.level] * props.multiplier : null}\n      <br></br>\n      {props.garrisons ? \"garrison: \" + props.garrisons[props.level] : null}\n      <br></br>\n      {props.upgradePrice ? \"upgrade price: \" + props.upgradePrice : null}\n    </div>;\n  }\n  return ( \n  <div className={classnames('square', props.styleName)} id = {props.id}>\n\n    {face}\n\n    <div className={classnames('province', props.provinceColor)}></div>\n\n    {detail}\n\n  </div>\n)};\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\nimport './Board.css';\nimport Game from './Game.js';\n\n\nclass Board extends React.Component {\n  // Create the board\n  constructor(props) {\n    super(props)\n    this.playerColors = [null, \"redText\", \"blueText\", \"purpleText\", \"greenText\"]\n  }\n  createBoard() {\n    const board = [];\n    board.push(<div className=\"center\">\n      <h1 className=\"title\">Mafia Wars</h1>\n    </div>);\n    let corner = this.renderSquare(0, \"corner\");\n    board.push(corner);\n    let row = [];\n    for (let i=1;i<10;i++){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row horizontal-row top-row\">{row}</div>);\n\n    corner = this.renderSquare(10, \"corner\");\n    board.push(corner);\n    row = [];\n    for (let i=11;i<20;i++){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row vertical-row right-row\">{row}</div>);\n\n    corner = this.renderSquare(30, \"corner\");\n    board.push(corner);\n    row = [];\n    for (let i=29;i>20;i--){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row horizontal-row bottom-row\">{row}</div>);\n\n    corner = this.renderSquare(20, \"corner\");\n    board.push(corner);\n    row = [];\n    for (let i=39;i>30;i--){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row vertical-row left-row\">{row}</div>);\n\n    return board;\n  }\n\n  renderSquare(i, className) {\n    let ownerColor = \"white\";\n    if (this.props.squares[i] && this.props.squares[i].owner){\n      let owner = this.props.squares[i].owner;\n      ownerColor = this.playerColors[owner[owner.length-1]];\n    }\n    \n    return (\n      <Square\n        key={i}\n        id={\"square\"+i}\n        num={i}\n        multiplier={this.props.squares[i] ? this.props.squares[i].multiplier : 1}\n        special={this.props.specials.includes(i)}\n        buyPrice={this.props.buyPrices[i]}\n        styleName={className}\n        provinceColor={this.props.provinces[i]}\n        playerColor={ownerColor}\n        owner={this.props.squares[i] ? this.props.squares[i].owner : null}\n        rents={this.props.squares[i] ? this.props.squares[i].rents : null}\n        garrisons={this.props.squares[i] ? this.props.squares[i].garrisons : null}\n        upgradePrice={this.props.squares[i] ? this.props.squares[i].upgradePrice : null}\n        level={this.props.squares[i] ? this.props.squares[i].level : null}\n        visitors={this.props.squares[i] ? this.props.squares[i].visitors : null}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard()}</div>;\n  }\n}\n\nexport default Board;\n","// class design for warlords\n// a monopoly game, with additional combat feature like risk\n// player can purchase an un-owned land and build hotels to charge rent on passing-by opponents\n// instead of paying rent to your opponent, you can fight his garrison with your troops\n// winning the combat can convert the ownership of this land to you!\n// losing combat will cause player to lose half his troops\n// players can initiate deals with another player, who can counter offer once.\n// They can trade money, for land, and even temporary truce.\n// Player passing by owned land can use money to upgrade the city when he passes by, boosting rent and defensive power.\n// he can also recruit troops with money\n\nclass tile {\n  constructor(rents, garrisons, upgradePrice=50) {\n      this.owner = null;\n      this.rents = rents || [10, 20, 40, 80];\n      this.garrisons = garrisons || [4, 5, 6, 8];\n      this.upgradePrice = upgradePrice;\n      this.level = 0; //can charge rent from opponent, can defend itself, can be upgraded\n      this.visitors = []; //players currently in this tile\n      this.multiplier = 1;\n  }\n}\n\nclass player {\n  constructor(num) {\n      this.number = num;\n      this.army = 1;\n      this.money = 1500;\n      this.territory = []; //owned tiles\n      this.position = 0;\n      this.railsOwned = 0;\n  }\n}\n\nexport {tile, player};","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";  \nimport {tile, player} from './logic';\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let newSquares = [];\n    for (let i=0;i<40;i++){\n      newSquares.push(new tile());\n    }\n    this.state = {\n      squares: newSquares, \n      players: [null, new player(1), new player(2)],\n      leftOffsets: [null, 20, 30, 20, 30],\n      topOffsets: [null, 80, 50, 50, 80],\n      buyPrices: [\n        null,60,null,60,null,200,100,null,100,120,null,140,150,140,160,200,180,null,180,200,null,\n        220,null,220,240,200,260,260,150,280,null,300,300,null,320,200,null,350,null,400\n      ],\n      provinces: [\n        null,\"brown\",null,\"brown\",\"null\",\"black\",\"aqua\",null,\"aqua\",\"aqua\",\n        null,\"pink\",\"silver\",\"pink\",\"pink\",\"black\",\"orange\",null,\"orange\",\"orange\",\n        null,\"red\",null,\"red\",\"red\",\"black\",\"yellow\",\"yellow\",\"silver\",\"yellow\",\n        null,\"green\",\"green\",null,\"green\",\"black\",null,\"darkblue\",null,\"darkblue\"\n      ],\n      specials: [\n        0,2,4,7,10,17,20,22,30,33,36,38\n      ],\n      neighbors: {\n        1 : [\"brown\", 1, 3],\n        3 : [\"brown\", 1, 3],\n        6 : [\"aqua\", 6, 8, 9],\n        8 : [\"aqua\", 6, 8, 9],\n        9 : [\"aqua\", 6, 8, 9],\n        11 : [\"pink\", 11, 13, 14],\n        13 : [\"pink\", 11, 13, 14],\n        14 : [\"pink\", 11, 13, 14],\n        16 : [\"orange\", 16, 18, 19],\n        18 : [\"orange\", 16, 18, 19],\n        19 : [\"orange\", 16, 18, 19],\n        21 : [\"red\", 21, 23, 24],\n        23 : [\"red\", 21, 23, 24],\n        24 : [\"red\", 21, 23, 24],\n        26 : [\"yellow\", 26, 27, 29],\n        27 : [\"yellow\", 26, 27, 29],\n        29 : [\"yellow\", 26, 27, 29],\n        31 : [\"green\", 31, 32, 34],\n        32 : [\"green\", 31, 32, 34],\n        34 : [\"green\", 31, 32, 34],\n        37 : [\"darkblue\", 37, 39],\n        39 : [\"darkblue\", 37, 39],\n        12 : [\"silver\", 12, 28],\n        28 : [\"silver\", 12, 28],\n        5 : [\"black\", 5, 15, 25, 35],\n        15 : [\"black\", 5, 15, 25, 35],\n        25 : [\"black\", 5, 15, 25, 35],\n        35 : [\"black\", 5, 15, 25, 35]\n      }\n    };\n\n    this.turn = '1';\n    this.gameOver = false;\n    this.counter = 0;\n    this.begin = true;\n    this.armyPrice = 200;\n\n    this.goListener = () => {this.onMove()};\n    this.payListener = () => {this.onPay()};\n    this.purchaseListener = () => {this.onPurchase()};\n    this.endTurnListener = () => {this.endTurn()};\n    this.upgradeListener = () => {this.onUpgrade()};\n    this.assaultListener = () => {this.onAssault()};\n    this.recruitListener = () => {this.onRecruit()};\n  }\n\n  componentDidMount(){\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // Publish move to the opponent's board\n      console.log(\"turn \", msg.message.turn, \" player \", this.props.piece);\n\n      if(this.turn != this.props.piece){\n        if (msg.message.action == \"move\"){\n          this.updateBoard(msg.message.action, msg.message.piece, msg.message.players, msg.message.squares, msg.message.toasts);\n        }else if ([\"purchase\", \"pay\", \"upgrade\",\"recruit\",\"assault\"].includes(msg.message.action)){\n          this.updateBoard(msg.message.action, msg.message.piece, msg.message.players, msg.message.squares, msg.message.toasts);\n        }else if (msg.message.action == \"end turn\"){\n          this.newTurn(msg.message.turn);\n        }else{\n          console.log(msg.message);\n        }\n      }\n    });\n  }\n\n  newRound = (winner) => {\n    let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if((this.props.isRoomCreator === false) && this.gameOver){\n      Swal.fire({  \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Waiting for a new round...',\n        confirmButtonColor: 'blue',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n        } ,\n      });\n      this.turn = '1'; // Set turn to 1 so Player 2 can't make a move \n    } \n\n    // Show this to the room creator\n    else if(this.props.isRoomCreator && this.gameOver){\n      Swal.fire({      \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Continue Playing?',\n        showCancelButton: true,\n        confirmButtonColor: 'blue',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n            cancelButton: 'button-class'\n        } ,\n      }).then((result) => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n\n        else{\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      })      \n    }\n   }\n\n\t// Update score for the winner\n  announceWinner = (winner) => {\n\t\tlet pieces = {\n\t\t\t'1': this.state.xScore,\n\t\t\t'2': this.state.oScore\n\t\t}\n\t\n\t\tif(winner === '1'){\n\t\t\tpieces['1'] += 1;\n\t\t\tthis.setState({\n\t\t\t\txScore: pieces['1']\n\t\t\t});\n\t\t}\n\t\telse{\n\t\t\tpieces['2'] += 1;\n\t\t\tthis.setState({\n\t\t\t\toScore: pieces['2']\n\t\t\t});\n\t\t}\n\t\t// End the game once there is a winner\n\t\tthis.gameOver = true;\n\t\tthis.newRound(winner);\t\n  }\n  \n  checkForWinner = (squares) => {\n    // Possible winning combinations\n    // const possibleCombinations = [\n    //   [0, 1, 2],\n    //   [3, 4, 5],\n    //   [6, 7, 8],\n    //   [0, 3, 6],\n    //   [1, 4, 7],\n    //   [2, 5, 8],\n    //   [0, 4, 8],\n    //   [2, 4, 6],\n    // ];\n  \n    // // Iterate every combination to see if there is a match\n    // for (let i = 0; i < possibleCombinations.length; i += 1) {\n    //   const [a, b, c] = possibleCombinations[i];\n    //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n    //     this.announceWinner(squares[a]);\n    //     return;\n    //   }\n    // }\n\n    // // Check if the game ends in a draw\n    // this.counter++;\n    // // The board is filled up and there is no winner\n    // if(this.counter === 40){\n    //   this.gameOver = true;\n    //   this.newRound(null);\n    // }\n  };\n   \n  newTurn = (turn) => {\n    this.turn = turn;\n    let status = document.getElementsByClassName(\"status-info\")[0];\n    status.innerHTML = `${this.turn == this.props.piece ? \"Your turn\" : \"Opponent's turn\"}`;\n    if (this.turn == this.props.piece){\n      console.log(this.turn, this.props.piece, \"new turn\")\n      // update controls\n      let goButton = document.querySelector(\"button.go\");\n      goButton.addEventListener(\"click\", this.goListener);\n      goButton.disabled = false;\n    }\n  }\n\n  updateBoard = (action, piece, newPlayers, newSquares, toastMessages) => {\n    for (let toastMessage of toastMessages){\n      ToastsStore.success(toastMessage, 10000);\n    }\n\n    this.setState(() => {\n      return {squares: newSquares}\n    });\n    this.setState(() => {\n      return {players: newPlayers}\n    });\n    if (action == \"move\"){\n      let pawn = document.querySelector(`#pawn${piece}`);\n      this.movePawn(piece, pawn, this.state.players[piece].position);\n    }\n  }\n\n  checkMonopoly = (pos) => {\n    let neighbors = this.state.neighbors[pos];\n    let color = neighbors.splice(0, 1);\n    let owner = this.state.squares[neighbors[0]].owner;\n    // railway\n    if (color == \"black\"){\n      for (let idx of neighbors){\n        let tile = this.state.squares[idx];\n        if (tile.owner){\n          let player = this.state.players[tile.owner[tile.owner.length-1]];\n          let railsOwned = player.railsOwned;\n          this.state.squares[idx].multiplier = 2**(railsOwned-1);\n        }\n      }\n    }else {\n      // others\n      for (let idx of neighbors){\n        if (this.state.squares[idx].owner != owner){\n          for (let idx of neighbors){\n            this.state.squares[idx].multiplier = 1;\n            // alert(\"monopoly lost\");\n          }\n        }\n      }\n      // alert(\"monopoly checked\");\n\n\n\n      // updateMultiplier\n      if (color == \"silver\"){\n        for (let idx of neighbors){\n          this.state.squares[idx].multiplier = 3;\n        }\n      }else{\n        for (let idx of neighbors){\n          this.state.squares[idx].multiplier = 2;\n        }\n      }\n    }\n    \n  }\n\n  movePawn = (piece, pawn, newIdx) => {\n    let newSquare = document.querySelector(`#square${newIdx}`);\n    pawn.style.left = this.state.leftOffsets[piece] + (newSquare.offsetLeft) + \"px\";\n    pawn.style.top = this.state.topOffsets[piece] + (newSquare.offsetTop) + \"px\";\n  }\n\n  onMove = () => {\n    this.begin = false;\n    let toastMessages = [];\n    if(this.turn === this.props.piece){\n      //move phase\n      let dice1 = parseInt(Math.random()*6)+1;\n      let dice2 = parseInt(Math.random()*6)+1;\n      let player = this.state.players[this.props.piece];\n      let oldIdx = this.state.players[this.props.piece].position;\n      let newIdx = (this.state.players[this.props.piece].position + dice1 + dice2);\n\n      // pass by go?\n      if (newIdx > 39){\n        // player earn $200\n        player.money = player.money + 200;\n        let toastMessage = `Player ${this.props.piece} passed Start and collected $200!`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      newIdx = newIdx % 40;\n\n      let tile = this.state.squares[newIdx];\n      player.position = (newIdx);\n      let pawn = document.querySelector(`#pawn${this.props.piece}`);\n      this.movePawn(this.props.piece, pawn, newIdx);\n\n      // update controls\n      let toastMessage = `Player ${this.props.piece} rolled a ${dice1} and a ${dice2}, moved from tile #${oldIdx} to tile #${newIdx}`;\n      ToastsStore.success(toastMessage, 10000);\n      toastMessages.push(toastMessage);\n      \n      let goButton = document.querySelector(\"button.go\");\n      goButton.removeEventListener(\"click\", this.goListener);\n      goButton.disabled = true;\n\n      if (this.state.specials.includes(newIdx)){\n        // special tile\n        if (newIdx == 0 || newIdx == 20){// go, parking\n          console.log(\"nothing happens\");\n        }else if ([2,7,17,22,33,36].includes(newIdx)){// random events\n          toastMessage = \"Random event: \";\n          let dice = parseInt(Math.random()*6)+1;\n          if (dice == 1){\n            player.money = player.money - 100;\n            toastMessage += `Cops! Player ${this.props.piece} lost $100`;\n            if (player.money < 0){\n              toastMessage += \" and bankrupted!\";\n              alert(\"game over\");\n              // player bankrupts\n            }\n          }else if (dice == 2){\n            player.money = player.money + 100;\n            toastMessage += `Revenue! Player ${this.props.piece} collected $100!`;\n          }else if (dice == 3){\n            player.army = player.army - 1;\n            toastMessage += `Attrition! 1 gangster left player ${this.props.piece}!`;\n            if (player.army < 0){\n              player.army = 0;\n              toastMessage = `Random event: Attrition! Player ${this.props.piece} already has 0 gangster.`\n            }\n          }else if (dice == 4){\n            player.army = player.army + 1;\n            toastMessage += `Volunteer! 1 gangster joined player ${this.props.piece}!`;\n          }else if (dice == 5){\n            player.money = player.money + 150;\n            toastMessage += `Revenue! Player ${this.props.piece} collected $150!`;\n          }else{\n            player.army = player.army + 2;\n            toastMessage += `Volunteer! 2 gangsters joined player ${this.props.piece}!`;\n          }\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n\n        }else if ([10,30].includes(newIdx)){ // street thugs\n          toastMessage = `Player ${this.props.piece} ran into thugs! Winner takes $200!`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n\n          let result = this.streetFight(player);\n          toastMessage = `Player ${this.props.piece} threw ${result.attackDices}! Thugs threw ${result.defendDices}`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n          if (result.attackTotal > result.defendTotal){\n            toastMessage = `Player ${this.props.piece} victory! Player ${this.props.piece} collected $200!`;\n          }else {\n            toastMessage = `Thugs victory! Player ${this.props.piece} got robbed $200!`;\n          }\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n        }else if (newIdx == 4){\n          let tax = parseInt(player.money * 0.1)\n          player.money = player.money - tax;\n          toastMessage = `Player ${this.props.piece} paid 10% tax and lost $${tax}!`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n        }else{// pay 20% tax\n          let tax = parseInt(player.money * 0.2)\n          player.money = player.money - tax;\n          toastMessage = `Player ${this.props.piece} paid 20% tax and lost $${tax}!`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n        }\n        // enable end turn\n        let endTurnButton = document.querySelector(\"button.endTurn\");\n        endTurnButton.addEventListener(\"click\", this.endTurnListener);\n        endTurnButton.disabled = false;\n\n      }else{\n\n        // normal tiles\n        if (!tile.owner){\n          // enable purchase and end button\n          let purchaseButton = document.querySelector(\"button.purchase\");\n          purchaseButton.addEventListener(\"click\", this.purchaseListener);\n          purchaseButton.disabled = false;\n          let endTurnButton = document.querySelector(\"button.endTurn\");\n          endTurnButton.addEventListener(\"click\", this.endTurnListener);\n          endTurnButton.disabled = false;\n        }else{\n          if (tile.owner == \"player \"+this.props.piece){\n            // enable upgrade and recruit and endturn\n            if (this.state.provinces[newIdx] != \"silver\" && this.state.provinces[newIdx] != \"black\"){\n            let upgradeButton = document.querySelector(\"button.upgrade\");\n            upgradeButton.addEventListener(\"click\", this.upgradeListener);\n            upgradeButton.disabled = false;\n            }\n\n            let recruitButton = document.querySelector(\"button.recruit\");\n            recruitButton.addEventListener(\"click\", this.recruitListener);\n            recruitButton.disabled = false;\n  \n            let endTurnButton = document.querySelector(\"button.endTurn\");\n            endTurnButton.addEventListener(\"click\", this.endTurnListener);\n            endTurnButton.disabled = false;\n  \n          }else{\n            // enable pay and assault\n            let payButton = document.querySelector(\"button.pay\");\n            payButton.addEventListener(\"click\", this.payListener);\n            payButton.disabled = false;\n            let assaultButton = document.querySelector(\"button.assault\");\n            assaultButton.addEventListener(\"click\", this.assaultListener);\n            assaultButton.disabled = false;\n          }\n        }\n      }\n      \n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"move\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      });  \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onPurchase = () => {\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn == this.props.piece && !tile.owner){\n      if (this.state.players[this.props.piece].money < this.state.buyPrices[pos]){\n        toastMessage = \"player \" + this.props.piece + \" has insufficient money\";\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        this.state.players[this.props.piece].money = this.state.players[this.props.piece].money - this.state.buyPrices[pos];\n        this.state.players[this.props.piece].territory.push(pos);\n        this.state.squares[pos].owner = \"player \" + this.props.piece;\n        if ([5,15,25,35].includes(pos)){\n          this.state.players[this.props.piece].railsOwned += 1;\n        }\n        this.checkMonopoly(pos);\n        \n        toastMessage = `Player ${this.props.piece} purchased tile #${pos} for $${this.state.buyPrices[pos]}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n\n      // update controls\n      let purchaseButton = document.querySelector(\"button.purchase\");\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n\n      purchaseButton.removeEventListener(\"click\", this.purchaseListener);\n      purchaseButton.disabled = true;\n      endTurnButton.addEventListener(\"click\", this.endTurnListener);\n      endTurnButton.disabled = false;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"purchase\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onPay = () => {\n    let payer = this.state.players[this.props.piece];\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn === this.props.piece && tile.owner && tile.owner!=\"player \"+this.props.piece){\n      let collector = this.state.players[tile.owner[tile.owner.length-1]];\n      if (payer.money < tile.rents[tile.level]){\n        // player bankrupts\n        toastMessage = `player ${this.props.piece} bankrupts!`;\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        payer.money = payer.money - tile.rents[tile.level];\n        collector.money = collector.money + tile.rents[tile.level];\n        toastMessage = `Player ${this.props.piece} paid player ${tile.owner[tile.owner.length-1]} $${tile.rents[tile.level]}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      // update controls\n      \n      let payButton = document.querySelector(\"button.pay\");\n      let assaultButton = document.querySelector(\"button.assault\");\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n\n      assaultButton.removeEventListener(\"click\", this.assaultListener);\n      assaultButton.disabled = true;\n      payButton.removeEventListener(\"click\", this.payListener);\n      payButton.disabled = true;\n      endTurnButton.addEventListener(\"click\", this.endTurnListener);\n      endTurnButton.disabled = false;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"pay\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onUpgrade = () => {\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let player = this.state.players[this.props.piece];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn === this.props.piece && tile.owner==\"player \" + this.props.piece){\n      if (tile.level >= 4){\n        toastMessage = `Tile ${pos} is already at max level`;\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else if (player.money < tile.upgradePrice){\n        toastMessage = `Player ${this.props.piece} has insufficient money`\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        player.money -= tile.upgradePrice;\n        tile.level += 1;\n        toastMessage = `Player ${this.props.piece} updated tile #${pos} to level ${tile.level}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      // update controls\n      \n      let upgradeButton = document.querySelector(\"button.upgrade\");\n      upgradeButton.removeEventListener(\"click\", this.upgradeListener);\n      upgradeButton.disbled = true;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"upgrade\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  streetFight = (attacker) => {\n    let attackDices = [];\n    let defendDices = [];\n    let attackTotal = 0;\n    let defendTotal = 0;\n    for (let i=0;i<attacker.army;i++){\n      let dice = parseInt(Math.random()*6)+1;\n      attackDices.push(dice);\n      attackTotal += dice;\n    }\n    for (let i=0;i<attacker.army;i++){\n      let dice = parseInt(Math.random()*6)+1;\n      defendDices.push(dice);\n      defendTotal += dice;\n    }\n    if (attackTotal > defendTotal) {\n      attacker.money += 200;\n    }else{\n      attacker.money -= 200;\n    }\n    return {\n      attackTotal: attackTotal,\n      defendTotal: defendTotal,\n      attackDices: attackDices,\n      defendDices: defendDices,\n    };\n  }\n\n  siege = (attacker, owner, pos) => {\n    let tile = this.state.squares[pos];\n    let attackDices = [];\n    let defendDices = [];\n    let attackTotal = 0;\n    let defendTotal = 0;\n    let casualty = 0;\n    for (let i=0;i<attacker.army;i++){\n      let dice = parseInt(Math.random()*6)+1;\n      attackDices.push(dice);\n      attackTotal += dice;\n    }\n    for (let i=0;i<tile.garrisons[tile.level];i++){\n      let dice = parseInt(Math.random()*6)+1;\n      defendDices.push(dice);\n      defendTotal += dice;\n    }\n    if (attackTotal > defendTotal) {\n        tile.owner = \"player \" + attacker.number;\n        attacker.territory.push(pos);\n\n        // remove tile from owner\n        let removed = false;\n        for (let idx in owner.territory){\n          if (owner.territory[idx] == pos){\n            owner.territory.splice(idx, 1);\n            removed = true;\n            break;\n          }\n        }\n        if (!removed) {alert(\"tile not found\")}\n        // update rails\n        if ([5,15,25,35].includes(pos)){\n          attacker.railsOwned -= 1;\n          owner.railsOwned -=1;\n        }\n        this.checkMonopoly(pos);\n    } else {\n      casualty = parseInt(attacker.army / 2);\n      attacker.army -= casualty;\n    }\n    return {\n        attackTotal: attackTotal,\n        defendTotal: defendTotal,\n        attackDices: attackDices,\n        defendDices: defendDices,\n        casualty: casualty\n    };\n  }\n\n  onAssault = () => {\n    let attacker = this.state.players[this.props.piece];\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn === this.props.piece && tile.owner && tile.owner!=\"player \"+this.props.piece){\n      let owner = this.state.players[tile.owner[tile.owner.length-1]];\n      // combat\n      let result = this.siege(attacker, owner, pos);\n\n      toastMessage = `{Player ${attacker.number} attacked with ${attacker.army} gangsters against ${tile.garrisons[tile.level]} defenders`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n      toastMessage = `{Player ${attacker.number} threw ${result.attackDices.join(\", \")}, totalling ${result.attackTotal}}`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n      toastMessage = `{Player ${owner.number} threw ${result.defendDices.join(\", \")}, totalling ${result.defendTotal}}`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n\n      // update controls\n      let payButton = document.querySelector(\"button.pay\");\n      let assaultButton = document.querySelector(\"button.assault\");\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n\n      if (result.attackTotal > result.defendTotal){\n        toastMessage = `{Tile #${pos} now belongs to player ${attacker.number}}`;\n        toastMessages.push(toastMessage);\n        ToastsStore.success(toastMessage, 10000);\n\n        assaultButton.removeEventListener(\"click\", this.assaultListener);\n        assaultButton.disabled = true;\n        payButton.removeEventListener(\"click\", this.payListener);\n        payButton.disabled = true;\n        endTurnButton.addEventListener(\"click\", this.endTurnListener);\n        endTurnButton.disabled = false;\n      }else{\n        toastMessage = `{Player ${attacker.number} lost ${result.casualty} gangsters}`;\n        toastMessages.push(toastMessage);\n        ToastsStore.success(toastMessage, 10000);\n\n        assaultButton.removeEventListener(\"click\", this.assaultListener);\n        assaultButton.disabled = true;\n      }\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"assault\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onRecruit = () => {\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let player = this.state.players[this.props.piece];\n    let toastMessage;\n    let toastMessages = [];\n\n    if(this.turn === this.props.piece && tile.owner && tile.owner==\"player \"+this.props.piece){\n      if (player.money < this.armyPrice){\n        // player bankrupts\n        toastMessage = \"player \" + this.props.piece + \" has insufficient money\";\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        player.money -= this.armyPrice;\n        player.army += 2;\n        toastMessage = `Player ${this.props.piece} recruited 2 gangster for $${this.armyPrice}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      // update controls\n      let recruitButton = document.querySelector(\"button.recruit\");\n      recruitButton.removeEventListener(\"click\", this.recruitListener);\n      recruitButton.disbled = true;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"recruit\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  endTurn = () => {\n    this.turn = (this.turn === '1') ? '2' : '1';\n    // update controls\n    let endTurnButton = document.querySelector(\"button.endTurn\");\n    endTurnButton.removeEventListener(\"click\", this.endTurnListener);\n    endTurnButton.disabled = true;\n    let upgradeButton = document.querySelector(\"button.upgrade\");\n    if (upgradeButton.disabled == false){\n      upgradeButton.removeEventListener(\"click\", this.upgradeListener);\n      upgradeButton.disabled = true;\n    }\n    let recruitButton = document.querySelector(\"button.recruit\");\n    if (recruitButton.disabled == false){\n      recruitButton.removeEventListener(\"click\", this.recruitListener);\n      recruitButton.disabled = true;\n    }\n    let purchaseButton = document.querySelector(\"button.purchase\");\n    if (purchaseButton.disabled == false){\n      purchaseButton.removeEventListener(\"click\", this.purchaseListener);\n      purchaseButton.disabled = true;\n    }\n    // Publish move to the channel\n    this.props.pubnub.publish({\n      message: {\n        action: \"end turn\",\n        piece: this.props.piece,\n        turn: this.turn,\n      },\n      channel: this.props.gameChannel\n    });  \n  }\n\n  render() {\n    console.log(\"render\");\n    let status;\n    status = `${this.props.piece == this.turn ? \"Your turn\" : \"Opponent's turn\"}`;\n    let goButton;\n    if (this.props.piece == this.turn && this.begin && this.props.piece == \"1\"){\n      goButton = <button className=\"go\" onClick={this.goListener}>GO!</button>;\n    }else{\n      goButton = <button className=\"go\" disabled>GO!</button>;\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n              squares={this.state.squares}\n              buyPrices={this.state.buyPrices}\n              provinces={this.state.provinces}\n              specials={this.state.specials}\n            />  \n        </div>\n        <div className=\"pawn\" id=\"pawn1\">player 1</div>\n        <div className=\"pawn\" id=\"pawn2\">player 2</div>\n        <div className=\"control\">\n          <p className=\"status-info\">\n            {status}\n          </p> \n          <div>You are player {this.props.piece}</div>\n          <ToastsContainer store={ToastsStore}/>\n          {goButton}\n          <button className=\"purchase\" disabled>Purchase land</button>\n          <button className=\"pay\" disabled>Pay rent</button>\n          <button className=\"upgrade\" disabled>Upgrade land</button>\n          <button className=\"recruit\" disabled>Recruit gangster</button>\n          <button className=\"assault\" disabled>Assault property</button>\n          <button className=\"endTurn\" disabled>End turn</button>\n          <div className=\"playersInfoWrapper\">\n            <div className=\"playersInfo\">\n              player 1\n              <br></br>\n              territory: {this.state.players[1].territory.length}\n              <br></br>\n              railways owned: {this.state.players[1].railsOwned}\n              <br></br>\n              gangsters: {this.state.players[1].army}\n              <br></br>\n              money: {this.state.players[1].money}\n            </div>\n            <div className=\"playersInfo\">\n              player 2\n              <br></br>\n              territory: {this.state.players[2].territory.length}\n              <br></br>\n              railways owned: {this.state.players[2].railsOwned}\n              <br></br>\n              gangsters: {this.state.players[2].army}\n              <br></br>\n              money: {this.state.players[2].money}\n              <br></br>\n            </div>\n\n          </div>\n        </div>     \n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport Board from './Board';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";  \nimport shortid  from 'shortid';\nimport './Game.css';\n \nclass App extends Component {\n  constructor(props) {  \n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-7ff08bc5-f641-4297-aef9-00f08ecdd561\", \n      subscribeKey: \"sub-c-a408ea2a-1236-11ea-8755-faba8a6641c7\"    \n    });\n    \n    this.state = {\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    };\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;    \n    this.pubnub.init(this);\n  }  \n  \n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if(this.lobbyChannel != null){\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        // Start the game once an opponent joins the channel\n        if(msg.message.notRoomCreator){\n          // Create a different channel for the game\n          this.gameChannel = 'tictactoegame--' + this.roomId;\n\n          this.pubnub.subscribe({\n            channels: [this.gameChannel]\n          });\n\n          this.setState({\n            isPlaying: true\n          });  \n\n          // Close the modals if they are opened\n          Swal.close();\n        }\n      }); \n    }\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = shortid.generate().substring(0,5);\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n  // Open the modal\n  Swal.fire({\n    position: 'top',\n    allowOutsideClick: false,\n    title: 'Share this room ID with your friend',\n    text: this.roomId,\n    width: 275,\n    padding: '0.7em',\n    // Custom CSS\n    customClass: {\n        heightAuto: false,\n        title: 'title-class',\n        popup: 'popup-class',\n        confirmButton: 'button-class'\n    }\n  })\n\n    this.setState({\n      piece: '1',\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });   \n  }\n  \n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'blue',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class ',\n        cancelButton: 'join-button-class'\n      } \n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if(result.value){\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub.hereNow({\n      channels: [this.lobbyChannel], \n    }).then((response) => { \n        if(response.totalOccupancy < 2){\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          \n          this.setState({\n            piece: '2',\n          });  \n          \n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true,\n            },\n            channel: this.lobbyChannel\n          });\n        } \n        else{\n          // Game in progress\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Error',\n            text: 'Game in progress. Try another room.',\n            width: 275,\n            padding: '0.7em',\n            customClass: {\n                heightAuto: false,\n                title: 'title-class',\n                popup: 'popup-class',\n                confirmButton: 'button-class'\n            }\n          })\n        }\n    }).catch((error) => { \n      console.log(error);\n    });\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;  \n\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  render() {  \n    return (  \n        <div> \n          <div className=\"title\">\n            <p>Mafia wars</p>\n          </div>\n\n          {\n            !this.state.isPlaying &&\n            <div className=\"game\">\n              <div className=\"button-container\">\n                  <button \n                    className=\"create-button \"\n                    disabled={this.state.isDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                    > Create \n                  </button>\n                  <button \n                    className=\"join-button\"\n                    onClick={(e) => this.onPressJoin()}\n                    > Join \n                  </button>\n                </div>   \n              <div className=\"board\">\n                <Board\n                    squares={0}\n                    buyPrices={[null,60,null,60,null,200,100,null,100,120,null,140,150,140,160,200,180,null,180,200,null,\n                      220,null,220,240,200,260,260,150,280,null,300,300,null,320,200,null,350,null,400\n                    ]}\n                    provinces={[\n                      null,\"brown\",null,\"brown\",\"null\",\"black\",\"aqua\",null,\"aqua\",\"aqua\",\n                      null,\"pink\",\"silver\",\"pink\",\"pink\",\"black\",\"orange\",null,\"orange\",\"orange\",\n                      null,\"red\",null,\"red\",\"red\",\"black\",\"yellow\",\"yellow\",\"silver\",\"yellow\",\n                      null,\"green\",\"green\",null,\"green\",\"black\",null,\"darkblue\",null,\"darkblue\"\n                    ]}\n                    specials={[\n                      0,2,4,7,10,17,20,22,30,33,36,38\n                    ]}\n                  />  \n              </div>\n              <div className=\"pawn\" id=\"pawn1\">player 1</div>\n              <div className=\"pawn\" id=\"pawn2\">player 2</div>\n            </div>\n          }\n\n          {\n            this.state.isPlaying &&\n            <Game \n              pubnub={this.pubnub}\n              gameChannel={this.gameChannel} \n              piece={this.state.piece}\n              isRoomCreator={this.state.isRoomCreator}\n              myTurn={this.state.myTurn}\n              xUsername={this.state.xUsername}\n              oUsername={this.state.oUsername}\n              endGame={this.endGame}\n            />\n          }\n        </div>\n    );  \n  } \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}