{"version":3,"sources":["Square.js","Board.js","logic.js","Game.js","App.js","index.js"],"names":["Square","props","face","detail","special","num","react_default","a","createElement","className","classnames","provinceColor","includes","buyPrice","playerColor","owner","level","rents","multiplier","garrisons","upgradePrice","styleName","id","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playerColors","board","push","corner","renderSquare","row","i","ownerColor","squares","length","src_Square","key","specials","buyPrices","provinces","visitors","createBoard","React","Component","tile","arguments","undefined","player","number","army","money","territory","position","railsOwned","Game","newRound","winner","title","concat","isRoomCreator","gameOver","Swal","fire","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","pubnub","publish","message","reset","channel","gameChannel","endGame","announceWinner","checkForWinner","newTurn","status","document","getElementsByClassName","innerHTML","piece","console","log","goButton","querySelector","addEventListener","goListener","disabled","updateBoard","action","newPlayers","newSquares","toastMessages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","toastMessage","ToastsStore","success","err","return","setState","players","pawn","movePawn","state","checkMonopoly","pos","neighbors","color","splice","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","idx","Math","pow","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","newIdx","newSquare","style","left","leftOffsets","offsetLeft","top","topOffsets","offsetTop","onMove","begin","dice1","parseInt","random","dice2","oldIdx","removeEventListener","dice","alert","streetFight","attackDices","defendDices","attackTotal","defendTotal","tax","endTurnButton","endTurnListener","upgradeButton","upgradeListener","recruitButton","recruitListener","payButton","payListener","assaultButton","assaultListener","purchaseButton","purchaseListener","toasts","error","onPurchase","onPay","payer","collector","onUpgrade","disbled","attacker","siege","casualty","removed","onAssault","join","onRecruit","armyPrice","endTurn","hereNow","channels","roomId","response","toString","totalOccupancy","1","3","6","8","9","11","13","14","16","18","19","21","23","24","26","27","29","31","32","34","37","39","12","28","5","15","25","35","counter","_this2","getMessage","msg","onClick","src_Board_0","lib","store","App","onPressCreate","e","lobbyChannel","subscribe","withPresence","padding","isDisabled","myTurn","onPressJoin","input","inputPlaceholder","joinRoom","notRoomCreator","catch","isPlaying","unsubscribe","PubNubReact","publishKey","subscribeKey","uuid","init","assertThisInitialized","close","_this3","src_Game","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.d2dd29d5.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport './Board.css';\n\nconst Square = props => {\n  let face;\n  let detail;\n  if (props.special){\n    if (props.num == 0){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>Start!</b>\n    </div>\n\n    detail = \n    <div className={classnames('detail', props.provinceColor)}>\n      #{props.num}\n      <br></br>\n      Collect $200!\n    </div>;\n    }else if ([2,7,17,22,33,36].includes(props.num)){\n      face = \n        <div className=\"face\">\n          #{props.num}\n          <br></br>\n          <b className=\"random\">?</b>\n        </div>\n\n      detail = \n        <div className={classnames('detail', props.provinceColor)}>\n          #{props.num}\n          <br></br>\n          Random events!\n        </div>;\n    }else if (props.num == 20){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>Stay for free</b>\n    </div>\n\n    }else if ([10,30].includes(props.num)){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>Street thugs!</b>\n    </div>\n\n    detail = \n    <div className={classnames('detail', props.provinceColor)}>\n      #{props.num}\n      <br></br>\n      Fight thugs of equal numbers, winner takes $200!\n    </div>;\n    }else if (props.num == 4){\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>10% tax!</b>\n    </div>\n    }else{\n      face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      <b>20% tax!</b>\n    </div>\n    }\n  }else{\n    face = \n    <div className=\"face\">\n      #{props.num}\n      <br></br>\n      {props.buyPrice ? \"$\" + props.buyPrice : null}\n      <br></br>\n      <div className={classnames(\"owner\", props.playerColor)}>{props.owner ? \"owner: \" + props.owner : null}</div>\n      <br></br>\n      {props.level ? \"level: \" + props.level : null}\n    </div>;\n\n    detail = \n    <div className={classnames('detail', props.provinceColor)}>\n      #{props.num}\n      <br></br>\n      {props.buyPrice ? \"$\" + props.buyPrice : null}\n      <br></br>\n      {props.owner ? \"owner: \" + props.owner : null}\n      <br></br>\n      {props.level !== null ? \"level: \" + props.level : null}\n      <br></br>\n      {props.rents ? \"rent: \" + props.rents[props.level] * props.multiplier : null}\n      <br></br>\n      {props.garrisons ? \"garrison: \" + props.garrisons[props.level] : null}\n      <br></br>\n      {props.upgradePrice ? \"upgrade price: \" + props.upgradePrice : null}\n    </div>;\n  }\n  return ( \n  <div className={classnames('square', props.styleName)} id = {props.id}>\n\n    {face}\n\n    <div className={classnames('province', props.provinceColor)}></div>\n\n    {detail}\n\n  </div>\n)};\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\nimport './Board.css';\nimport Game from './Game.js';\n\n\nclass Board extends React.Component {\n  // Create the board\n  constructor(props) {\n    super(props)\n    this.playerColors = [null, \"redText\", \"blueText\", \"purpleText\", \"greenText\"]\n  }\n  createBoard() {\n    const board = [];\n    board.push(<div className=\"center\">\n      <h1 className=\"title\">Mafia Wars</h1>\n    </div>);\n    let corner = this.renderSquare(0, \"corner\");\n    board.push(corner);\n    let row = [];\n    for (let i=1;i<10;i++){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row horizontal-row top-row\">{row}</div>);\n\n    corner = this.renderSquare(10, \"corner\");\n    board.push(corner);\n    row = [];\n    for (let i=11;i<20;i++){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row vertical-row right-row\">{row}</div>);\n\n    corner = this.renderSquare(30, \"corner\");\n    board.push(corner);\n    row = [];\n    for (let i=29;i>20;i--){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row horizontal-row bottom-row\">{row}</div>);\n\n    corner = this.renderSquare(20, \"corner\");\n    board.push(corner);\n    row = [];\n    for (let i=39;i>30;i--){\n      row.push(this.renderSquare(i));\n    }\n    board.push(<div className=\"row vertical-row left-row\">{row}</div>);\n\n    return board;\n  }\n\n  renderSquare(i, className) {\n    let ownerColor = \"white\";\n    if (this.props.squares[i] && this.props.squares[i].owner){\n      let owner = this.props.squares[i].owner;\n      ownerColor = this.playerColors[owner[owner.length-1]];\n    }\n    \n    return (\n      <Square\n        key={i}\n        id={\"square\"+i}\n        num={i}\n        multiplier={this.props.squares[i] ? this.props.squares[i].multiplier : 1}\n        special={this.props.specials.includes(i)}\n        buyPrice={this.props.buyPrices[i]}\n        styleName={className}\n        provinceColor={this.props.provinces[i]}\n        playerColor={ownerColor}\n        owner={this.props.squares[i] ? this.props.squares[i].owner : null}\n        rents={this.props.squares[i] ? this.props.squares[i].rents : null}\n        garrisons={this.props.squares[i] ? this.props.squares[i].garrisons : null}\n        upgradePrice={this.props.squares[i] ? this.props.squares[i].upgradePrice : null}\n        level={this.props.squares[i] ? this.props.squares[i].level : null}\n        visitors={this.props.squares[i] ? this.props.squares[i].visitors : null}\n      />\n    );\n  }\n\n  render() {\n    return <div>{this.createBoard()}</div>;\n  }\n}\n\nexport default Board;\n","// class design for warlords\n// a monopoly game, with additional combat feature like risk\n// player can purchase an un-owned land and build hotels to charge rent on passing-by opponents\n// instead of paying rent to your opponent, you can fight his garrison with your troops\n// winning the combat can convert the ownership of this land to you!\n// losing combat will cause player to lose half his troops\n// players can initiate deals with another player, who can counter offer once.\n// They can trade money, for land, and even temporary truce.\n// Player passing by owned land can use money to upgrade the city when he passes by, boosting rent and defensive power.\n// he can also recruit troops with money\n\nclass tile {\n  constructor(rents, garrisons, upgradePrice=50) {\n      this.owner = null;\n      this.rents = rents || [10, 20, 40, 80];\n      this.garrisons = garrisons || [4, 5, 6, 8];\n      this.upgradePrice = upgradePrice;\n      this.level = 0; //can charge rent from opponent, can defend itself, can be upgraded\n      this.visitors = []; //players currently in this tile\n      this.multiplier = 1;\n  }\n}\n\nclass player {\n  constructor(num) {\n      this.number = num;\n      this.army = 1;\n      this.money = 1500;\n      this.territory = []; //owned tiles\n      this.position = 0;\n      this.railsOwned = 0;\n  }\n}\n\nexport {tile, player};","import React from 'react';\nimport Board from './Board';\nimport Swal from \"sweetalert2\";  \nimport {tile, player} from './logic';\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    let newSquares = [];\n    for (let i=0;i<40;i++){\n      newSquares.push(new tile());\n    }\n    this.state = {\n      squares: newSquares, \n      players: [null, new player(1), new player(2), new player(3), new player(4)],\n      leftOffsets: [null, 20, 30, 20, 30],\n      topOffsets: [null, 80, 50, 50, 80],\n      buyPrices: [\n        null,60,null,60,null,200,100,null,100,120,null,140,150,140,160,200,180,null,180,200,null,\n        220,null,220,240,200,260,260,150,280,null,300,300,null,320,200,null,350,null,400\n      ],\n      provinces: [\n        null,\"brown\",null,\"brown\",\"null\",\"black\",\"aqua\",null,\"aqua\",\"aqua\",\n        null,\"pink\",\"silver\",\"pink\",\"pink\",\"black\",\"orange\",null,\"orange\",\"orange\",\n        null,\"red\",null,\"red\",\"red\",\"black\",\"yellow\",\"yellow\",\"silver\",\"yellow\",\n        null,\"green\",\"green\",null,\"green\",\"black\",null,\"darkblue\",null,\"darkblue\"\n      ],\n      specials: [\n        0,2,4,7,10,17,20,22,30,33,36,38\n      ],\n      neighbors: {\n        1 : [\"brown\", 1, 3],\n        3 : [\"brown\", 1, 3],\n        6 : [\"aqua\", 6, 8, 9],\n        8 : [\"aqua\", 6, 8, 9],\n        9 : [\"aqua\", 6, 8, 9],\n        11 : [\"pink\", 11, 13, 14],\n        13 : [\"pink\", 11, 13, 14],\n        14 : [\"pink\", 11, 13, 14],\n        16 : [\"orange\", 16, 18, 19],\n        18 : [\"orange\", 16, 18, 19],\n        19 : [\"orange\", 16, 18, 19],\n        21 : [\"red\", 21, 23, 24],\n        23 : [\"red\", 21, 23, 24],\n        24 : [\"red\", 21, 23, 24],\n        26 : [\"yellow\", 26, 27, 29],\n        27 : [\"yellow\", 26, 27, 29],\n        29 : [\"yellow\", 26, 27, 29],\n        31 : [\"green\", 31, 32, 34],\n        32 : [\"green\", 31, 32, 34],\n        34 : [\"green\", 31, 32, 34],\n        37 : [\"darkblue\", 37, 39],\n        39 : [\"darkblue\", 37, 39],\n        12 : [\"silver\", 12, 28],\n        28 : [\"silver\", 12, 28],\n        5 : [\"black\", 5, 15, 25, 35],\n        15 : [\"black\", 5, 15, 25, 35],\n        25 : [\"black\", 5, 15, 25, 35],\n        35 : [\"black\", 5, 15, 25, 35]\n      }\n    };\n\n    this.turn = '1';\n    this.gameOver = false;\n    this.counter = 0;\n    this.begin = true;\n    this.armyPrice = 200;\n\n    this.goListener = () => {this.onMove()};\n    this.payListener = () => {this.onPay()};\n    this.purchaseListener = () => {this.onPurchase()};\n    this.endTurnListener = () => {this.endTurn()};\n    this.upgradeListener = () => {this.onUpgrade()};\n    this.assaultListener = () => {this.onAssault()};\n    this.recruitListener = () => {this.onRecruit()};\n  }\n\n  componentDidMount(){\n    this.props.pubnub.getMessage(this.props.gameChannel, (msg) => {\n      // Publish move to the opponent's board\n      console.log(\"turn \", msg.message.turn, \" player \", this.props.piece);\n\n      if(this.turn != this.props.piece){\n        if (msg.message.action == \"move\"){\n          this.updateBoard(msg.message.action, msg.message.piece, msg.message.players, msg.message.squares, msg.message.toasts);\n        }else if ([\"purchase\", \"pay\", \"upgrade\",\"recruit\",\"assault\"].includes(msg.message.action)){\n          this.updateBoard(msg.message.action, msg.message.piece, msg.message.players, msg.message.squares, msg.message.toasts);\n        }else if (msg.message.action == \"end turn\"){\n          this.newTurn(msg.message.turn);\n        }else{\n          console.log(msg.message);\n        }\n      }\n    });\n  }\n\n  newRound = (winner) => {\n    let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    if((this.props.isRoomCreator === false) && this.gameOver){\n      Swal.fire({  \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Waiting for a new round...',\n        confirmButtonColor: 'blue',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n        } ,\n      });\n      this.turn = '1'; \n    } \n\n    // Show this to the room creator\n    else if(this.props.isRoomCreator && this.gameOver){\n      Swal.fire({      \n        position: 'top',\n        allowOutsideClick: false,\n        title: title,\n        text: 'Continue Playing?',\n        showCancelButton: true,\n        confirmButtonColor: 'blue',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class',\n            cancelButton: 'button-class'\n        } ,\n      }).then((result) => {\n        // Start a new round\n        if (result.value) {\n          this.props.pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n\n        else{\n          // End the game\n          this.props.pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: this.props.gameChannel\n          });\n        }\n      })      \n    }\n   }\n\n\t// Update score for the winner\n  announceWinner = (winner) => {\n\t\t// let pieces = {\n\t\t// \t'1': this.state.xScore,\n\t\t// \t'2': this.state.oScore\n\t\t// }\n\t\n\t\t// if(winner === '1'){\n\t\t// \tpieces['1'] += 1;\n\t\t// \tthis.setState({\n\t\t// \t\txScore: pieces['1']\n\t\t// \t});\n\t\t// }\n\t\t// else{\n\t\t// \tpieces['2'] += 1;\n\t\t// \tthis.setState({\n\t\t// \t\toScore: pieces['2']\n\t\t// \t});\n\t\t// }\n\t\t// // End the game once there is a winner\n\t\t// this.gameOver = true;\n\t\t// this.newRound(winner);\t\n  }\n  \n  checkForWinner = (squares) => {\n    // Possible winning combinations\n    // const possibleCombinations = [\n    //   [0, 1, 2],\n    //   [3, 4, 5],\n    //   [6, 7, 8],\n    //   [0, 3, 6],\n    //   [1, 4, 7],\n    //   [2, 5, 8],\n    //   [0, 4, 8],\n    //   [2, 4, 6],\n    // ];\n  \n    // // Iterate every combination to see if there is a match\n    // for (let i = 0; i < possibleCombinations.length; i += 1) {\n    //   const [a, b, c] = possibleCombinations[i];\n    //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n    //     this.announceWinner(squares[a]);\n    //     return;\n    //   }\n    // }\n\n    // // Check if the game ends in a draw\n    // this.counter++;\n    // // The board is filled up and there is no winner\n    // if(this.counter === 40){\n    //   this.gameOver = true;\n    //   this.newRound(null);\n    // }\n  };\n   \n  newTurn = (turn) => {\n    this.turn = turn;\n    let status = document.getElementsByClassName(\"status-info\")[0];\n    status.innerHTML = \"Player \" + this.turn + \"'s turn\";\n    if (this.turn == this.props.piece){\n      console.log(this.turn, this.props.piece, \"new turn\")\n      status.innerHTML = \"Your turn!\";\n      // update controls\n      let goButton = document.querySelector(\"button.go\");\n      goButton.addEventListener(\"click\", this.goListener);\n      goButton.disabled = false;\n    }\n  }\n\n  updateBoard = (action, piece, newPlayers, newSquares, toastMessages) => {\n    for (let toastMessage of toastMessages){\n      ToastsStore.success(toastMessage, 10000);\n    }\n\n    this.setState(() => {\n      return {squares: newSquares}\n    });\n    this.setState(() => {\n      return {players: newPlayers}\n    });\n    if (action == \"move\"){\n      let pawn = document.querySelector(`#pawn${piece}`);\n      this.movePawn(piece, pawn, this.state.players[piece].position);\n    }\n  }\n\n  checkMonopoly = (pos) => {\n    let neighbors = this.state.neighbors[pos];\n    let color = neighbors.splice(0, 1);\n    let owner = this.state.squares[neighbors[0]].owner;\n    // railway\n    if (color == \"black\"){\n      for (let idx of neighbors){\n        let tile = this.state.squares[idx];\n        if (tile.owner){\n          let player = this.state.players[tile.owner[tile.owner.length-1]];\n          let railsOwned = player.railsOwned;\n          this.state.squares[idx].multiplier = 2**(railsOwned-1);\n        }\n      }\n    }else {\n      // others\n      for (let idx of neighbors){\n        if (this.state.squares[idx].owner != owner){\n          for (let idx of neighbors){\n            this.state.squares[idx].multiplier = 1;\n            // alert(\"monopoly lost\");\n          }\n        }\n      }\n      // alert(\"monopoly checked\");\n\n\n\n      // updateMultiplier\n      if (color == \"silver\"){\n        for (let idx of neighbors){\n          this.state.squares[idx].multiplier = 3;\n        }\n      }else{\n        for (let idx of neighbors){\n          this.state.squares[idx].multiplier = 2;\n        }\n      }\n    }\n    \n  }\n\n  movePawn = (piece, pawn, newIdx) => {\n    let newSquare = document.querySelector(`#square${newIdx}`);\n    pawn.style.left = this.state.leftOffsets[piece] + (newSquare.offsetLeft) + \"px\";\n    pawn.style.top = this.state.topOffsets[piece] + (newSquare.offsetTop) + \"px\";\n  }\n\n  onMove = () => {\n    this.begin = false;\n    let toastMessages = [];\n    if(this.turn === this.props.piece){\n      //move phase\n      let dice1 = parseInt(Math.random()*6)+1;\n      let dice2 = parseInt(Math.random()*6)+1;\n      let player = this.state.players[this.props.piece];\n      let oldIdx = this.state.players[this.props.piece].position;\n      let newIdx = (this.state.players[this.props.piece].position + dice1 + dice2);\n\n      // pass by go?\n      if (newIdx > 39){\n        // player earn $200\n        player.money = player.money + 200;\n        let toastMessage = `Player ${this.props.piece} passed Start and collected $200!`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      newIdx = newIdx % 40;\n\n      let tile = this.state.squares[newIdx];\n      player.position = (newIdx);\n      let pawn = document.querySelector(`#pawn${this.props.piece}`);\n      this.movePawn(this.props.piece, pawn, newIdx);\n\n      // update controls\n      let toastMessage = `Player ${this.props.piece} rolled a ${dice1} and a ${dice2}, moved from tile #${oldIdx} to tile #${newIdx}`;\n      ToastsStore.success(toastMessage, 10000);\n      toastMessages.push(toastMessage);\n      \n      let goButton = document.querySelector(\"button.go\");\n      goButton.removeEventListener(\"click\", this.goListener);\n      goButton.disabled = true;\n\n      if (this.state.specials.includes(newIdx)){\n        // special tile\n        if (newIdx == 0 || newIdx == 20){// go, parking\n          console.log(\"nothing happens\");\n        }else if ([2,7,17,22,33,36].includes(newIdx)){// random events\n          toastMessage = \"Random event: \";\n          let dice = parseInt(Math.random()*6)+1;\n          if (dice == 1){\n            player.money = player.money - 100;\n            toastMessage += `Cops! Player ${this.props.piece} lost $100`;\n            if (player.money < 0){\n              toastMessage += \" and bankrupted!\";\n              alert(\"game over\");\n              // player bankrupts\n            }\n          }else if (dice == 2){\n            player.money = player.money + 100;\n            toastMessage += `Revenue! Player ${this.props.piece} collected $100!`;\n          }else if (dice == 3){\n            player.army = player.army - 1;\n            toastMessage += `Attrition! 1 gangster left player ${this.props.piece}!`;\n            if (player.army < 0){\n              player.army = 0;\n              toastMessage = `Random event: Attrition! Player ${this.props.piece} already has 0 gangster.`\n            }\n          }else if (dice == 4){\n            player.army = player.army + 1;\n            toastMessage += `Volunteer! 1 gangster joined player ${this.props.piece}!`;\n          }else if (dice == 5){\n            player.money = player.money + 150;\n            toastMessage += `Revenue! Player ${this.props.piece} collected $150!`;\n          }else{\n            player.army = player.army + 2;\n            toastMessage += `Volunteer! 2 gangsters joined player ${this.props.piece}!`;\n          }\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n\n        }else if ([10,30].includes(newIdx)){ // street thugs\n          toastMessage = `Player ${this.props.piece} ran into thugs! Winner takes $200!`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n\n          let result = this.streetFight(player);\n          toastMessage = `Player ${this.props.piece} threw ${result.attackDices}! Thugs threw ${result.defendDices}`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n          if (result.attackTotal > result.defendTotal){\n            toastMessage = `Player ${this.props.piece} victory! Player ${this.props.piece} collected $200!`;\n          }else {\n            toastMessage = `Thugs victory! Player ${this.props.piece} got robbed $200!`;\n          }\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n        }else if (newIdx == 4){\n          let tax = parseInt(player.money * 0.1)\n          player.money = player.money - tax;\n          toastMessage = `Player ${this.props.piece} paid 10% tax and lost $${tax}!`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n        }else{// pay 20% tax\n          let tax = parseInt(player.money * 0.2)\n          player.money = player.money - tax;\n          toastMessage = `Player ${this.props.piece} paid 20% tax and lost $${tax}!`;\n          ToastsStore.success(toastMessage, 10000);\n          toastMessages.push(toastMessage);\n        }\n        // enable end turn\n        let endTurnButton = document.querySelector(\"button.endTurn\");\n        endTurnButton.addEventListener(\"click\", this.endTurnListener);\n        endTurnButton.disabled = false;\n\n      }else{\n\n        // normal tiles\n        if (!tile.owner){\n          // enable purchase and end button\n          let purchaseButton = document.querySelector(\"button.purchase\");\n          purchaseButton.addEventListener(\"click\", this.purchaseListener);\n          purchaseButton.disabled = false;\n          let endTurnButton = document.querySelector(\"button.endTurn\");\n          endTurnButton.addEventListener(\"click\", this.endTurnListener);\n          endTurnButton.disabled = false;\n        }else{\n          if (tile.owner == \"player \"+this.props.piece){\n            // enable upgrade and recruit and endturn\n            if (this.state.provinces[newIdx] != \"silver\" && this.state.provinces[newIdx] != \"black\"){\n            let upgradeButton = document.querySelector(\"button.upgrade\");\n            upgradeButton.addEventListener(\"click\", this.upgradeListener);\n            upgradeButton.disabled = false;\n            }\n\n            let recruitButton = document.querySelector(\"button.recruit\");\n            recruitButton.addEventListener(\"click\", this.recruitListener);\n            recruitButton.disabled = false;\n  \n            let endTurnButton = document.querySelector(\"button.endTurn\");\n            endTurnButton.addEventListener(\"click\", this.endTurnListener);\n            endTurnButton.disabled = false;\n  \n          }else{\n            // enable pay and assault\n            let payButton = document.querySelector(\"button.pay\");\n            payButton.addEventListener(\"click\", this.payListener);\n            payButton.disabled = false;\n            let assaultButton = document.querySelector(\"button.assault\");\n            assaultButton.addEventListener(\"click\", this.assaultListener);\n            assaultButton.disabled = false;\n          }\n        }\n      }\n      \n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"move\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      });  \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onPurchase = () => {\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn == this.props.piece && !tile.owner){\n      if (this.state.players[this.props.piece].money < this.state.buyPrices[pos]){\n        toastMessage = \"player \" + this.props.piece + \" has insufficient money\";\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        this.state.players[this.props.piece].money = this.state.players[this.props.piece].money - this.state.buyPrices[pos];\n        this.state.players[this.props.piece].territory.push(pos);\n        this.state.squares[pos].owner = \"player \" + this.props.piece;\n        if ([5,15,25,35].includes(pos)){\n          this.state.players[this.props.piece].railsOwned += 1;\n        }\n        this.checkMonopoly(pos);\n        \n        toastMessage = `Player ${this.props.piece} purchased tile #${pos} for $${this.state.buyPrices[pos]}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n\n      // update controls\n      let purchaseButton = document.querySelector(\"button.purchase\");\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n\n      purchaseButton.removeEventListener(\"click\", this.purchaseListener);\n      purchaseButton.disabled = true;\n      endTurnButton.addEventListener(\"click\", this.endTurnListener);\n      endTurnButton.disabled = false;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"purchase\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onPay = () => {\n    let payer = this.state.players[this.props.piece];\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn === this.props.piece && tile.owner && tile.owner!=\"player \"+this.props.piece){\n      let collector = this.state.players[tile.owner[tile.owner.length-1]];\n      if (payer.money < tile.rents[tile.level]){\n        // player bankrupts\n        toastMessage = `player ${this.props.piece} bankrupts!`;\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        payer.money = payer.money - tile.rents[tile.level];\n        collector.money = collector.money + tile.rents[tile.level];\n        toastMessage = `Player ${this.props.piece} paid player ${tile.owner[tile.owner.length-1]} $${tile.rents[tile.level]}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      // update controls\n      \n      let payButton = document.querySelector(\"button.pay\");\n      let assaultButton = document.querySelector(\"button.assault\");\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n\n      assaultButton.removeEventListener(\"click\", this.assaultListener);\n      assaultButton.disabled = true;\n      payButton.removeEventListener(\"click\", this.payListener);\n      payButton.disabled = true;\n      endTurnButton.addEventListener(\"click\", this.endTurnListener);\n      endTurnButton.disabled = false;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"pay\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onUpgrade = () => {\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let player = this.state.players[this.props.piece];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn === this.props.piece && tile.owner==\"player \" + this.props.piece){\n      if (tile.level >= 4){\n        toastMessage = `Tile ${pos} is already at max level`;\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else if (player.money < tile.upgradePrice){\n        toastMessage = `Player ${this.props.piece} has insufficient money`\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        player.money -= tile.upgradePrice;\n        tile.level += 1;\n        toastMessage = `Player ${this.props.piece} updated tile #${pos} to level ${tile.level}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      // update controls\n      \n      let upgradeButton = document.querySelector(\"button.upgrade\");\n      upgradeButton.removeEventListener(\"click\", this.upgradeListener);\n      upgradeButton.disbled = true;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"upgrade\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  streetFight = (attacker) => {\n    let attackDices = [];\n    let defendDices = [];\n    let attackTotal = 0;\n    let defendTotal = 0;\n    for (let i=0;i<attacker.army;i++){\n      let dice = parseInt(Math.random()*6)+1;\n      attackDices.push(dice);\n      attackTotal += dice;\n    }\n    for (let i=0;i<attacker.army;i++){\n      let dice = parseInt(Math.random()*6)+1;\n      defendDices.push(dice);\n      defendTotal += dice;\n    }\n    if (attackTotal > defendTotal) {\n      attacker.money += 200;\n    }else{\n      attacker.money -= 200;\n    }\n    return {\n      attackTotal: attackTotal,\n      defendTotal: defendTotal,\n      attackDices: attackDices,\n      defendDices: defendDices,\n    };\n  }\n\n  siege = (attacker, owner, pos) => {\n    let tile = this.state.squares[pos];\n    let attackDices = [];\n    let defendDices = [];\n    let attackTotal = 0;\n    let defendTotal = 0;\n    let casualty = 0;\n    for (let i=0;i<attacker.army;i++){\n      let dice = parseInt(Math.random()*6)+1;\n      attackDices.push(dice);\n      attackTotal += dice;\n    }\n    for (let i=0;i<tile.garrisons[tile.level];i++){\n      let dice = parseInt(Math.random()*6)+1;\n      defendDices.push(dice);\n      defendTotal += dice;\n    }\n    if (attackTotal > defendTotal) {\n        tile.owner = \"player \" + attacker.number;\n        attacker.territory.push(pos);\n\n        // remove tile from owner\n        let removed = false;\n        for (let idx in owner.territory){\n          if (owner.territory[idx] == pos){\n            owner.territory.splice(idx, 1);\n            removed = true;\n            break;\n          }\n        }\n        if (!removed) {alert(\"tile not found\")}\n        // update rails\n        if ([5,15,25,35].includes(pos)){\n          attacker.railsOwned -= 1;\n          owner.railsOwned -=1;\n        }\n        this.checkMonopoly(pos);\n    } \n\n    casualty = parseInt(attacker.army / 2);\n    attacker.army -= casualty;\n    return {\n        attackTotal: attackTotal,\n        defendTotal: defendTotal,\n        attackDices: attackDices,\n        defendDices: defendDices,\n        casualty: casualty\n    };\n  }\n\n  onAssault = () => {\n    let attacker = this.state.players[this.props.piece];\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let toastMessage;\n    let toastMessages = [];\n    if(this.turn === this.props.piece && tile.owner && tile.owner!=\"player \"+this.props.piece){\n      let owner = this.state.players[tile.owner[tile.owner.length-1]];\n      // combat\n      let result = this.siege(attacker, owner, pos);\n\n      toastMessage = `{Player ${attacker.number} attacked with ${attacker.army} gangsters against ${tile.garrisons[tile.level]} defenders`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n      toastMessage = `{Player ${attacker.number} threw ${result.attackDices.join(\", \")}, totalling ${result.attackTotal}}`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n      toastMessage = `{Player ${owner.number} threw ${result.defendDices.join(\", \")}, totalling ${result.defendTotal}}`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n\n      // update controls\n      let payButton = document.querySelector(\"button.pay\");\n      let assaultButton = document.querySelector(\"button.assault\");\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n\n      if (result.attackTotal > result.defendTotal){\n        toastMessage = `{Tile #${pos} now belongs to player ${attacker.number}}`;\n        toastMessages.push(toastMessage);\n        ToastsStore.success(toastMessage, 10000);\n\n        assaultButton.removeEventListener(\"click\", this.assaultListener);\n        assaultButton.disabled = true;\n        payButton.removeEventListener(\"click\", this.payListener);\n        payButton.disabled = true;\n        endTurnButton.addEventListener(\"click\", this.endTurnListener);\n        endTurnButton.disabled = false;\n      }\n\n      toastMessage = `{Player ${attacker.number} lost ${result.casualty} gangsters}`;\n      toastMessages.push(toastMessage);\n      ToastsStore.success(toastMessage, 10000);\n\n      assaultButton.removeEventListener(\"click\", this.assaultListener);\n      assaultButton.disabled = true;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"assault\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  onRecruit = () => {\n    let pos = this.state.players[this.props.piece].position;\n    let tile = this.state.squares[pos];\n    let player = this.state.players[this.props.piece];\n    let toastMessage;\n    let toastMessages = [];\n\n    if(this.turn === this.props.piece && tile.owner && tile.owner==\"player \"+this.props.piece){\n      if (player.money < this.armyPrice){\n        // player bankrupts\n        toastMessage = \"player \" + this.props.piece + \" has insufficient money\";\n        ToastsStore.error(toastMessage);\n        toastMessages.push(toastMessage);\n      }else{\n        player.money -= this.armyPrice;\n        player.army += 2;\n        toastMessage = `Player ${this.props.piece} recruited 2 gangster for $${this.armyPrice}`;\n        ToastsStore.success(toastMessage, 10000);\n        toastMessages.push(toastMessage);\n      }\n      // update controls\n      let recruitButton = document.querySelector(\"button.recruit\");\n      recruitButton.removeEventListener(\"click\", this.recruitListener);\n      recruitButton.disbled = true;\n\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"recruit\",\n          turn: this.turn,\n          piece: this.props.piece,\n          players: this.state.players,\n          squares: this.state.squares,\n          toasts: toastMessages\n        },\n        channel: this.props.gameChannel\n      }); \n    }else{\n      ToastsStore.error(\"invalid move\");\n    }\n  }\n\n  endTurn = () => {\n    this.props.pubnub.hereNow({\n      channels: [\"mafiaLobby--\"+this.props.roomId], \n    }).then((response) => {\n      this.turn = (parseInt(this.turn) + 1).toString();\n      if (this.turn > response.totalOccupancy){\n        this.turn = '1';\n      }\n      // update controls\n      let endTurnButton = document.querySelector(\"button.endTurn\");\n      endTurnButton.removeEventListener(\"click\", this.endTurnListener);\n      endTurnButton.disabled = true;\n      let upgradeButton = document.querySelector(\"button.upgrade\");\n      if (upgradeButton.disabled == false){\n        upgradeButton.removeEventListener(\"click\", this.upgradeListener);\n        upgradeButton.disabled = true;\n      }\n      let recruitButton = document.querySelector(\"button.recruit\");\n      if (recruitButton.disabled == false){\n        recruitButton.removeEventListener(\"click\", this.recruitListener);\n        recruitButton.disabled = true;\n      }\n      let purchaseButton = document.querySelector(\"button.purchase\");\n      if (purchaseButton.disabled == false){\n        purchaseButton.removeEventListener(\"click\", this.purchaseListener);\n        purchaseButton.disabled = true;\n      }\n      // Publish move to the channel\n      this.props.pubnub.publish({\n        message: {\n          action: \"end turn\",\n          piece: this.props.piece,\n          turn: this.turn\n        },\n        channel: this.props.gameChannel\n      });  \n    });\n  }\n\n  render() {\n    console.log(\"render\");\n    let status;\n    status = `${this.props.piece == this.turn ? \"Your turn\" : \"Opponent's turn\"}`;\n    let goButton;\n    if (this.props.piece == this.turn && this.begin && this.props.piece == \"1\"){\n      goButton = <button className=\"go\" onClick={this.goListener}>GO!</button>;\n    }else{\n      goButton = <button className=\"go\" disabled>GO!</button>;\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n              squares={this.state.squares}\n              buyPrices={this.state.buyPrices}\n              provinces={this.state.provinces}\n              specials={this.state.specials}\n            />  \n        </div>\n        <div className=\"pawn\" id=\"pawn1\">player 1</div>\n        <div className=\"pawn\" id=\"pawn2\">player 2</div>\n        <div className=\"pawn\" id=\"pawn3\">player 3</div>\n        <div className=\"pawn\" id=\"pawn4\">player 4</div>\n        <div className=\"control\">\n          <p className=\"status-info\">\n            {status}\n          </p> \n          <div>You are player {this.props.piece}</div>\n          <ToastsContainer store={ToastsStore}/>\n          {goButton}\n          <button className=\"purchase\" disabled>Purchase land</button>\n          <button className=\"pay\" disabled>Pay rent</button>\n          <button className=\"upgrade\" disabled>Upgrade land</button>\n          <button className=\"recruit\" disabled>Recruit gangster</button>\n          <button className=\"assault\" disabled>Assault property</button>\n          <button className=\"endTurn\" disabled>End turn</button>\n          <div className=\"playersInfoWrapper\">\n            <div className=\"playersInfo\">\n              player 1\n              <br></br>\n              territory: {this.state.players[1].territory.length}\n              <br></br>\n              railways owned: {this.state.players[1].railsOwned}\n              <br></br>\n              gangsters: {this.state.players[1].army}\n              <br></br>\n              money: ${this.state.players[1].money}\n            </div>\n            <div className=\"playersInfo\">\n              player 2\n              <br></br>\n              territory: {this.state.players[2].territory.length}\n              <br></br>\n              railways owned: {this.state.players[2].railsOwned}\n              <br></br>\n              gangsters: {this.state.players[2].army}\n              <br></br>\n              money: ${this.state.players[2].money}\n              <br></br>\n            </div>\n            <div className=\"playersInfo\">\n              player 3\n              <br></br>\n              territory: {this.state.players[3].territory.length}\n              <br></br>\n              railways owned: {this.state.players[3].railsOwned}\n              <br></br>\n              gangsters: {this.state.players[3].army}\n              <br></br>\n              money: ${this.state.players[3].money}\n            </div>\n            <div className=\"playersInfo\">\n              player 4\n              <br></br>\n              territory: {this.state.players[4].territory.length}\n              <br></br>\n              railways owned: {this.state.players[4].railsOwned}\n              <br></br>\n              gangsters: {this.state.players[4].army}\n              <br></br>\n              money: ${this.state.players[4].money}\n              <br></br>\n            </div>\n\n          </div>\n        </div>     \n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport Board from './Board';\nimport PubNubReact from 'pubnub-react';\nimport Swal from \"sweetalert2\";  \nimport shortid  from 'shortid';\nimport './Game.css';\n \nclass App extends Component {\n  constructor(props) {  \n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: \"pub-c-7ff08bc5-f641-4297-aef9-00f08ecdd561\", \n      subscribeKey: \"sub-c-a408ea2a-1236-11ea-8755-faba8a6641c7\",\n      uuid:parseInt(Math.random()*100000).toString(10)\n    });\n    \n    this.state = {\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    };\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;    \n    this.pubnub.init(this);\n  }  \n  \n  componentWillUnmount() {\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  componentDidUpdate() {\n    // Check that the player is connected to a channel\n    if(this.lobbyChannel != null){\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\n        if(msg.message.notRoomCreator){\n          // Create a different channel for the game\n          this.gameChannel = 'mafiaGame--' + this.roomId;\n\n            this.pubnub.subscribe({\n              channels: [this.gameChannel]\n            });\n  \n            this.setState({\n              isPlaying: true\n            });  \n  \n            // Close the modals if they are opened\n            Swal.close();\n          \n        }\n      }); \n    }\n  }\n\n  // Create a room channel\n  onPressCreate = (e) => {\n    // Create a random name for the channel\n    this.roomId = parseInt(Math.random()*100000).toString(10);\n    this.lobbyChannel = 'mafiaLobby--' + this.roomId;\n\n    this.pubnub.subscribe({\n      channels: [this.lobbyChannel],\n      withPresence: true\n    });\n\n  // Open the modal\n  Swal.fire({\n    position: 'top',\n    allowOutsideClick: false,\n    title: 'Share this room ID with your friend',\n    text: this.roomId,\n    width: 275,\n    padding: '0.7em',\n    // Custom CSS\n    customClass: {\n        heightAuto: false,\n        title: 'title-class',\n        popup: 'popup-class',\n        confirmButton: 'button-class'\n    }\n  })\n\n    this.setState({\n      piece: '1',\n      isRoomCreator: true,\n      isDisabled: true, // Disable the 'Create' button\n      myTurn: true, // Room creator makes the 1st move\n    });   \n  }\n  \n  // The 'Join' button was pressed\n  onPressJoin = (e) => {\n    Swal.fire({\n      position: 'top',\n      input: 'text',\n      allowOutsideClick: false,\n      inputPlaceholder: 'Enter the room id',\n      showCancelButton: true,\n      confirmButtonColor: 'blue',\n      confirmButtonText: 'OK',\n      width: 275,\n      padding: '0.7em',\n      customClass: {\n        heightAuto: false,\n        popup: 'popup-class',\n        confirmButton: 'join-button-class ',\n        cancelButton: 'join-button-class'\n      } \n    }).then((result) => {\n      // Check if the user typed a value in the input field\n      if(result.value){\n        this.joinRoom(result.value);\n      }\n    })\n  }\n\n  // Join a room channel\n  joinRoom = (value) => {\n    this.roomId = value;\n    this.lobbyChannel = 'mafiaLobby--' + this.roomId;\n\n    // Check the number of people in the channel\n    this.pubnub.hereNow({\n      channels: [this.lobbyChannel], \n    }).then((response) => {\n        alert(\"Current players in the room: \"+response.totalOccupancy);\n\n        if(response.totalOccupancy < 4){\n          this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true\n          });\n          \n          this.setState({\n            piece: (1+response.totalOccupancy).toString(),\n          });  \n          \n          this.pubnub.publish({\n            message: {\n              notRoomCreator: true,\n            },\n            channel: this.lobbyChannel\n          });\n        } \n        else{\n          // Game in progress\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Error',\n            text: 'Game in progress. Try another room.',\n            width: 275,\n            padding: '0.7em',\n            customClass: {\n                heightAuto: false,\n                title: 'title-class',\n                popup: 'popup-class',\n                confirmButton: 'button-class'\n            }\n          })\n        }\n    }).catch((error) => { \n      console.log(error);\n    });\n  }\n\n  // Reset everything\n  endGame = () => {\n    this.setState({\n      piece: '',\n      isPlaying: false,\n      isRoomCreator: false,\n      isDisabled: false,\n      myTurn: false,\n    });\n\n    this.lobbyChannel = null;\n    this.gameChannel = null;\n    this.roomId = null;  \n\n    this.pubnub.unsubscribe({\n      channels : [this.lobbyChannel, this.gameChannel]\n    });\n  }\n  \n  render() {  \n    return (  \n        <div> \n          <div className=\"title\">\n            <p>Mafia wars</p>\n          </div>\n\n          {\n            !this.state.isPlaying &&\n            <div className=\"game\">\n              <div className=\"button-container\">\n                  <button \n                    className=\"create-button \"\n                    disabled={this.state.isDisabled}\n                    onClick={(e) => this.onPressCreate()}\n                    > Create \n                  </button>\n                  <button \n                    className=\"join-button\"\n                    onClick={(e) => this.onPressJoin()}\n                    > Join \n                  </button>\n                </div>   \n              <div className=\"board\">\n                <Board\n                    squares={0}\n                    buyPrices={[null,60,null,60,null,200,100,null,100,120,null,140,150,140,160,200,180,null,180,200,null,\n                      220,null,220,240,200,260,260,150,280,null,300,300,null,320,200,null,350,null,400\n                    ]}\n                    provinces={[\n                      null,\"brown\",null,\"brown\",\"null\",\"black\",\"aqua\",null,\"aqua\",\"aqua\",\n                      null,\"pink\",\"silver\",\"pink\",\"pink\",\"black\",\"orange\",null,\"orange\",\"orange\",\n                      null,\"red\",null,\"red\",\"red\",\"black\",\"yellow\",\"yellow\",\"silver\",\"yellow\",\n                      null,\"green\",\"green\",null,\"green\",\"black\",null,\"darkblue\",null,\"darkblue\"\n                    ]}\n                    specials={[\n                      0,2,4,7,10,17,20,22,30,33,36,38\n                    ]}\n                  />  \n              </div>\n              <div className=\"pawn\" id=\"pawn1\">player 1</div>\n              <div className=\"pawn\" id=\"pawn2\">player 2</div>\n              <div className=\"pawn\" id=\"pawn3\">player 3</div>\n              <div className=\"pawn\" id=\"pawn4\">player 4</div>\n            </div>\n          }\n\n          {\n            this.state.isPlaying &&\n            <Game \n              roomId={this.roomId}\n              pubnub={this.pubnub}\n              gameChannel={this.gameChannel} \n              piece={this.state.piece}\n              isRoomCreator={this.state.isRoomCreator}\n              endGame={this.endGame}\n            />\n          }\n        </div>\n    );  \n  } \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}